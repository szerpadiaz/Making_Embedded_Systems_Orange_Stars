/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 27.05.2022 14:33:25

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 33280;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteEvalTensor tflEvalTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,28,28,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 784, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data2[32*3*3*1] = { 
  /* [0][0][][] */ -53, 89, 55, 
  /* [0][1][][] */ 24, -20, -127, 
  /* [0][2][][] */ 5, -29, 16, 
  /* [1][0][][] */ 31, 88, -82, 
  /* [1][1][][] */ 99, -5, -127, 
  /* [1][2][][] */ 27, -99, -25, 
  /* [2][0][][] */ 58, -23, -127, 
  /* [2][1][][] */ 48, -91, -53, 
  /* [2][2][][] */ -123, -110, 45, 
  /* [3][0][][] */ -84, 81, -2, 
  /* [3][1][][] */ -3, 92, -19, 
  /* [3][2][][] */ 40, -1, -127, 
  /* [4][0][][] */ -2, 116, -101, 
  /* [4][1][][] */ 33, 32, -38, 
  /* [4][2][][] */ 61, 52, 127, 
  /* [5][0][][] */ -18, -50, 78, 
  /* [5][1][][] */ 88, 125, 13, 
  /* [5][2][][] */ 29, -79, -127, 
  /* [6][0][][] */ 13, -8, -79, 
  /* [6][1][][] */ 1, 82, -119, 
  /* [6][2][][] */ 2, 127, -33, 
  /* [7][0][][] */ -10, 107, 44, 
  /* [7][1][][] */ -55, 57, 26, 
  /* [7][2][][] */ 127, 116, 55, 
  /* [8][0][][] */ 127, -126, -99, 
  /* [8][1][][] */ 82, 5, -13, 
  /* [8][2][][] */ 14, 6, 16, 
  /* [9][0][][] */ 38, 68, 127, 
  /* [9][1][][] */ 119, 65, 109, 
  /* [9][2][][] */ 100, 126, 56, 
  /* [10][0][][] */ -87, -127, -65, 
  /* [10][1][][] */ 76, 41, 6, 
  /* [10][2][][] */ 16, 30, 42, 
  /* [11][0][][] */ 96, -127, 6, 
  /* [11][1][][] */ -1, -6, 38, 
  /* [11][2][][] */ -4, 3, -38, 
  /* [12][0][][] */ 94, -61, -124, 
  /* [12][1][][] */ 105, -94, -127, 
  /* [12][2][][] */ 71, -52, -59, 
  /* [13][0][][] */ 50, -6, -113, 
  /* [13][1][][] */ -41, 127, -32, 
  /* [13][2][][] */ -88, -3, 55, 
  /* [14][0][][] */ -127, -77, 8, 
  /* [14][1][][] */ -62, 38, 85, 
  /* [14][2][][] */ -11, 36, 61, 
  /* [15][0][][] */ 95, 74, 90, 
  /* [15][1][][] */ 78, 16, -28, 
  /* [15][2][][] */ 16, 78, -127, 
  /* [16][0][][] */ -37, 35, 32, 
  /* [16][1][][] */ -118, -56, 91, 
  /* [16][2][][] */ -115, -46, 127, 
  /* [17][0][][] */ -8, 68, 84, 
  /* [17][1][][] */ -25, -15, -106, 
  /* [17][2][][] */ -85, -127, -50, 
  /* [18][0][][] */ -123, -127, -115, 
  /* [18][1][][] */ -21, -7, -56, 
  /* [18][2][][] */ 44, 39, 37, 
  /* [19][0][][] */ -71, 10, 24, 
  /* [19][1][][] */ 127, -111, 117, 
  /* [19][2][][] */ -12, 18, -119, 
  /* [20][0][][] */ 16, 22, 74, 
  /* [20][1][][] */ 55, 47, 11, 
  /* [20][2][][] */ -55, -70, -127, 
  /* [21][0][][] */ 23, -97, -68, 
  /* [21][1][][] */ -127, -42, 79, 
  /* [21][2][][] */ 69, 64, 33, 
  /* [22][0][][] */ -12, 27, 44, 
  /* [22][1][][] */ 80, 41, 30, 
  /* [22][2][][] */ -71, -127, -15, 
  /* [23][0][][] */ -3, -107, -76, 
  /* [23][1][][] */ -12, 127, 67, 
  /* [23][2][][] */ -19, -90, -31, 
  /* [24][0][][] */ 73, 2, 34, 
  /* [24][1][][] */ -127, -42, 62, 
  /* [24][2][][] */ 33, 47, 27, 
  /* [25][0][][] */ 29, -4, -88, 
  /* [25][1][][] */ 53, 14, -72, 
  /* [25][2][][] */ 43, -121, -127, 
  /* [26][0][][] */ 88, 63, 113, 
  /* [26][1][][] */ -36, 56, 127, 
  /* [26][2][][] */ -84, 64, 33, 
  /* [27][0][][] */ 127, 90, 59, 
  /* [27][1][][] */ -92, -89, -14, 
  /* [27][2][][] */ 18, 12, 19, 
  /* [28][0][][] */ 46, 60, 84, 
  /* [28][1][][] */ -82, -8, -4, 
  /* [28][2][][] */ -101, -127, -51, 
  /* [29][0][][] */ 127, 6, 31, 
  /* [29][1][][] */ -18, 97, -5, 
  /* [29][2][][] */ 28, 7, 95, 
  /* [30][0][][] */ -96, -30, 21, 
  /* [30][1][][] */ -127, -123, 86, 
  /* [30][2][][] */ -71, -56, 124, 
  /* [31][0][][] */ 51, 58, -11, 
  /* [31][1][][] */ 11, 1, 81, 
  /* [31][2][][] */ -1, -127, -69, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 32,3,3,1 } };
const TfArray<32, float> quant2_scale = { 32, { 0.0070055718533694744, 0.0064840842969715595, 0.0068765170872211456, 0.0071709295734763145, 0.0028630539309233427, 0.0048572416417300701, 0.0059831109829246998, 0.0024166321381926537, 0.0059763127937912941, 0.0026122452691197395, 0.0073163853958249092, 0.0070486217737197876, 0.0053519923239946365, 0.0063115772791206837, 0.0070205321535468102, 0.0034540044143795967, 0.0047738743014633656, 0.0068823415786027908, 0.0075164325535297394, 0.0037030358798801899, 0.0064617819152772427, 0.0056972438469529152, 0.0073247579857707024, 0.0051355711184442043, 0.004404720850288868, 0.0058550653047859669, 0.0028116651810705662, 0.0042579164728522301, 0.0071110581047832966, 0.0039799455553293228, 0.0057219173759222031, 0.007099091075360775, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[32] = { -4342, -1174, 5282, -7575, -14219, -7921, -3339, -18192, -6186, -32450, -299, -106, -4839, -13090, -1692, -23594, -460, 3414, 3704, -284, -3823, -3035, -3876, -378, -3241, 13754, -21754, -5091, -733, -14597, -178, -3047, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 2.7472831789054908e-05, 2.5427783839404583e-05, 2.6966734367306344e-05, 2.8121294235461392e-05, 1.1227662980672903e-05, 1.9048007743549533e-05, 2.3463182515115477e-05, 9.4769893621560186e-06, 2.3436521587427706e-05, 1.024409993988229e-05, 2.8691709303529933e-05, 2.7641655833576806e-05, 2.0988207324990071e-05, 2.4751285309321247e-05, 2.7531499654287472e-05, 1.3545116416935343e-05, 1.8721077140071429e-05, 2.6989577236236073e-05, 2.9476208510459401e-05, 1.4521709999826271e-05, 2.5340323190903291e-05, 2.2342133888741955e-05, 2.8724542062263936e-05, 2.0139495973126031e-05, 1.7273416233365424e-05, 2.2961041395319626e-05, 1.1026138963643461e-05, 1.6697713363100775e-05, 2.7886504540219903e-05, 1.5607631212333217e-05, 2.2438893211074173e-05, 2.783957461360842e-05, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[16*3*3*32] = { 
  /* [0][0][][] */ 53,55,26,80,0,5,25,-9,32,-15,-25,17,43,27,24,-1,16,-98,-98,44,1,21,7,26,1,-53,-36,-3,-22,-9,13,45, 43,10,-7,44,-19,11,42,-39,19,-14,-10,80,8,84,-4,-12,-5,-46,-71,44,20,8,26,46,7,-68,-21,2,-22,-21,1,2, -6,36,36,13,9,-6,18,16,47,-10,28,71,24,97,-2,-20,38,-4,-25,62,-9,43,0,23,28,-62,10,6,-23,-17,14,4, 
  /* [0][1][][] */ 50,-18,-72,12,8,4,-6,-23,25,-3,8,67,-14,12,-9,18,-18,-43,-62,51,-1,21,-4,71,-14,-84,-15,5,-22,24,3,19, 33,15,-10,46,-2,24,8,3,9,10,37,48,-54,46,1,6,-21,-43,-72,25,-12,47,31,55,-5,-67,-26,6,-51,-9,-26,9, 49,17,-22,71,2,48,16,-10,-18,9,28,50,-32,20,26,13,-68,-13,-77,20,29,38,36,60,21,-44,14,28,-25,0,-43,10, 
  /* [0][2][][] */ 21,-16,-127,-7,-3,-2,27,1,62,-11,51,55,-34,117,-53,-1,13,-28,-71,26,-1,-20,11,42,-17,-62,-1,6,-3,8,-29,24, 20,-32,-127,2,-12,-28,55,8,10,-20,33,19,-10,58,-2,10,-14,-42,-46,16,-7,-14,-1,21,4,-57,-6,16,-21,-17,-58,16, 13,-4,-69,24,-7,-13,-25,20,12,5,57,32,-4,74,-1,15,-25,-32,-60,12,-4,58,-1,60,4,-69,8,10,-18,-5,-65,14, 
  /* [1][0][][] */ -40,18,-47,-17,2,-2,56,8,-1,-12,23,11,-11,77,-59,-4,-14,-61,5,71,-59,22,-33,67,39,-29,5,65,-45,21,-12,-41, -65,8,41,-6,-12,20,7,-19,-1,-8,39,25,33,-17,16,35,52,-87,-22,64,-51,-24,-58,-27,-36,6,-7,-43,-127,-15,38,-41, -11,24,52,42,-20,40,-3,-23,-68,-13,5,13,-25,29,14,7,14,-27,-50,17,31,14,0,47,-33,-24,-26,-79,-96,-34,-1,-2, 
  /* [1][1][][] */ 14,38,68,36,17,56,-11,0,7,8,20,30,35,-58,21,12,-4,-45,-71,80,-1,9,2,0,-5,-12,-7,-4,-92,8,15,-48, 28,72,62,61,8,-6,18,8,-26,-13,-53,4,49,-78,44,-18,19,-91,-90,30,-65,22,-69,13,1,5,-26,-21,-33,-25,37,-16, 46,5,6,35,1,20,42,-7,-2,-27,-27,44,6,20,26,-2,13,-71,-69,45,-17,32,-21,72,-18,-55,-22,13,-47,-12,27,25, 
  /* [1][2][][] */ 4,43,-74,-32,10,-8,5,-7,3,-2,-34,39,16,-41,-31,16,-11,-34,-40,-1,14,12,-17,-20,7,-12,-1,30,-2,25,21,26, -17,-21,-84,9,6,-38,-12,1,9,-3,-10,18,-5,48,32,-10,-10,-48,-19,1,-21,9,-2,18,20,-36,-1,5,-14,23,-20,7, 5,-41,-83,-16,34,-25,-17,28,63,20,14,62,-33,48,17,-12,6,-1,-64,-7,-21,33,-30,50,27,-75,9,4,36,26,18,29, 
  /* [2][0][][] */ 22,-10,-71,-17,35,-7,21,-20,61,0,-8,26,-35,58,-45,18,-18,-54,-102,20,-8,-9,10,17,7,-24,29,44,19,52,-24,39, 85,42,-4,79,15,7,8,-3,39,-12,20,74,17,2,-11,22,-16,-37,-63,27,-47,54,-35,2,7,-7,-18,-3,-67,17,-6,-80, 47,32,89,35,-22,30,2,11,-6,-26,18,1,20,36,19,5,-4,6,22,30,12,61,11,55,-12,-2,-24,-3,-30,-5,-6,12, 
  /* [2][1][][] */ -22,-56,-67,-12,11,-6,-37,-26,-12,-13,-25,-18,-107,66,-26,-28,27,6,-97,0,11,-36,10,-35,23,-50,16,6,23,-2,30,41, 4,-21,-89,-17,19,-54,-6,-11,-3,3,6,8,-48,30,-26,6,17,-10,-99,1,-3,-21,-12,-14,-15,-52,21,-20,-24,23,5,10, 61,-9,-73,39,18,4,5,-4,13,5,32,9,-22,31,8,12,-29,-16,-26,9,-1,41,-2,62,17,-27,-7,-8,-32,20,-58,-8, 
  /* [2][2][][] */ -37,9,50,-18,-72,10,-69,-61,-4,-46,9,63,-61,29,14,-35,30,18,-2,-10,6,-21,7,26,13,23,-19,20,26,-13,30,-18, -34,-42,-16,-30,13,-32,-2,11,26,3,-127,-13,23,43,-10,-39,33,6,-38,19,-15,-56,23,-94,10,16,16,-3,12,-13,18,30, 30,-91,-81,6,3,-48,-11,12,24,5,32,50,-57,87,-44,-9,24,14,-41,4,-31,-12,-10,32,-17,-95,16,-3,-29,43,-1,-35, 
  /* [3][0][][] */ 29,8,-21,12,24,49,-5,25,-14,10,-9,64,6,47,1,29,1,-77,-17,53,-47,-3,-27,-5,13,-47,-1,52,-23,18,-3,16, 13,23,11,37,2,30,-2,3,-28,4,-50,43,-13,10,22,19,-1,-51,-75,26,-34,47,-10,4,4,-26,2,9,-96,2,36,-5, 61,33,35,29,-14,36,3,0,-6,-13,-14,55,20,-12,12,9,-26,-26,-38,74,2,24,-14,47,-18,-28,-3,-16,-12,-9,-23,-24, 
  /* [3][1][][] */ 30,0,-3,19,-3,33,20,11,-29,37,-55,26,14,-27,13,15,1,-49,-82,26,2,24,-11,28,5,-2,3,-10,-58,23,17,0, -9,-10,-71,-4,-9,-22,7,-19,3,3,-48,11,24,39,-5,5,11,-34,-103,19,-10,19,-17,15,14,-69,-17,1,-4,-3,-14,-3, 55,4,-83,39,-5,31,22,-14,3,-13,-34,27,-37,26,-20,-14,-17,9,-51,21,-7,-2,11,107,29,-38,2,18,8,-15,-23,21, 
  /* [3][2][][] */ -3,-21,-127,-24,23,-11,69,-12,26,1,-45,-3,14,117,-10,8,12,-21,-86,0,-10,-3,34,20,5,-45,17,21,-2,23,-14,-6, 9,-26,-106,-21,-7,-18,13,-8,17,-11,28,-5,11,60,-80,-9,20,37,17,2,-1,3,-2,39,32,-49,-12,13,35,0,-20,16, 27,-18,-77,-23,5,11,-24,-7,23,5,53,35,-52,13,-24,-6,-17,43,28,10,20,13,25,38,16,-58,2,20,40,0,-5,19, 
  /* [4][0][][] */ -21,20,-59,8,36,-19,45,16,4,8,-3,-26,51,78,-5,37,21,-21,-37,2,-20,0,-39,93,-30,35,18,7,7,15,21,-29, -85,-12,-11,-11,-22,75,-5,-8,-16,-28,16,8,-20,19,-40,-14,-20,17,26,-16,48,28,40,77,-37,6,-11,37,30,-1,-14,30, -51,-46,11,-81,-84,-46,-97,-56,-97,-47,-31,-122,-66,-56,-113,-16,-100,17,25,-77,34,-23,28,-30,-54,-25,-4,-16,13,-52,-119,7, 
  /* [4][1][][] */ -1,6,-38,-1,16,-74,38,32,15,13,-27,-40,12,38,-20,0,37,1,-87,-89,-44,-88,-70,3,6,8,31,-26,-17,21,24,-20, 32,57,31,-53,-7,50,10,0,16,0,73,24,14,14,47,10,23,73,56,26,54,78,25,64,-2,16,-12,35,52,27,80,29, -14,-23,-7,-1,-23,-63,-2,-16,1,-31,20,-47,-27,-80,-34,-56,-74,-10,53,-90,-32,6,11,-50,-22,-20,-26,-4,18,-31,-55,-49, 
  /* [4][2][][] */ -29,-69,-54,-127,-19,-84,-19,-41,-68,-50,-118,-94,-121,-54,-38,-80,-6,40,-57,-69,-36,-65,17,17,-3,4,8,15,13,-41,-30,-9, -33,27,-11,-34,5,17,17,-5,-5,-4,-1,16,16,-9,56,-20,63,41,-39,-30,-45,-6,0,84,33,22,24,41,-10,20,83,-33, -58,31,6,-31,-17,-18,1,-22,40,-18,9,-4,33,8,-57,10,41,-59,-33,-27,-66,-42,-50,-48,-44,37,-11,-37,-46,11,8,-53, 
  /* [5][0][][] */ -20,-58,-35,-44,-2,17,27,-11,-4,-9,20,17,-45,77,-120,7,-21,45,-67,-8,42,-85,6,69,19,-22,39,42,52,32,-59,67, 9,25,-1,-2,-30,29,-127,-24,-63,8,-13,5,-44,-104,21,22,-49,16,-63,16,39,27,19,-1,-38,13,-20,-14,39,4,1,23, -1,48,41,13,-29,43,-65,-19,-73,-27,-55,-1,-13,-112,26,-23,-44,18,-18,-9,23,-8,21,-33,-20,17,-30,6,1,-11,-25,1, 
  /* [5][1][][] */ 27,-62,27,44,-1,-38,-20,-9,-103,-49,43,-118,-115,-48,2,-72,14,67,19,-91,13,2,-21,-109,-6,-37,-37,-29,50,-59,4,-38, -20,-35,22,-55,-5,2,-40,18,-32,33,72,-18,-55,-85,29,9,-44,66,43,11,50,57,-12,67,29,-42,9,-3,103,-8,-28,9, -97,-91,-8,-89,-3,-45,-19,-6,9,-27,29,-31,-60,-70,-34,11,-45,-18,57,-38,-12,-7,4,-21,-37,-34,-42,-22,45,-13,-35,-11, 
  /* [5][2][][] */ -28,-16,6,33,29,28,-3,22,-12,-12,12,10,-16,-65,14,4,4,-51,38,1,1,38,41,24,-15,11,-26,-35,-62,8,-13,38, 2,-59,-25,21,15,27,36,21,-20,-8,-2,12,-38,6,-22,52,4,-21,66,-2,-14,27,-3,20,-25,-23,26,-12,-24,11,-26,-27, -13,-89,-59,-51,27,-29,-16,15,19,-4,51,5,-62,62,-39,-15,-16,31,87,13,-5,48,26,78,32,-56,23,26,47,29,-38,52, 
  /* [6][0][][] */ 64,6,37,56,-57,33,-24,-41,-57,-69,50,-79,-35,-20,19,-87,1,27,26,-16,15,4,-20,55,-34,8,-49,-98,4,-83,15,-48, 83,-15,44,-12,-46,5,-92,-41,-90,-26,92,-125,-61,-72,22,-41,-18,53,27,-73,-10,58,-39,103,-27,5,-42,18,17,-15,-20,-41, -3,10,6,17,-28,47,-22,-5,-87,-11,111,-84,-6,0,9,24,-21,11,50,-5,28,44,-4,43,-13,-57,-15,-32,-6,-55,-25,-6, 
  /* [6][1][][] */ 24,3,-14,16,-28,-11,52,-28,-9,-41,-13,6,19,28,26,-61,-6,6,-28,-68,-20,-22,-27,23,-39,-9,-48,-31,-21,-36,16,2, 11,49,-36,10,8,53,-24,24,-31,4,8,17,30,-69,37,-15,-17,39,44,9,45,26,26,49,14,-20,18,9,8,-31,-14,-28, 44,39,-18,68,4,44,7,0,0,2,73,41,37,1,-21,-6,-10,78,88,17,34,54,41,42,15,-46,9,11,31,-10,-24,2, 
  /* [6][2][][] */ -25,-114,13,-105,-96,-96,-57,-79,-127,-71,-49,-113,-121,-85,-28,-100,-23,57,52,-90,-9,-83,-21,-79,-30,-6,-46,-42,42,-99,-16,-63, -4,-56,-18,-44,-18,62,-103,-37,-67,-19,53,27,-118,-103,-13,-72,-24,58,122,1,84,-3,93,93,-39,-16,-21,10,66,-29,-19,30, -5,24,-34,-31,-1,28,-40,-14,-77,-19,52,-46,-73,-78,21,-22,-9,3,35,-43,1,28,34,31,-4,-90,-23,9,-16,-36,-28,-24, 
  /* [7][0][][] */ -4,11,43,29,-34,29,31,-8,6,-32,-41,41,66,-10,32,-26,18,-92,-11,21,-16,33,5,-44,16,14,-40,-26,-60,-13,38,-37, 5,47,38,26,-19,-11,23,-27,3,-39,-4,45,44,10,25,-30,33,-89,5,39,-4,19,11,66,-11,-4,-16,-22,-72,-34,23,-23, -21,56,33,20,-6,-29,77,-21,26,-56,50,-8,48,27,-6,-28,-5,-127,-7,-23,-100,-27,-35,29,-29,16,-63,-69,-110,-26,-13,-67, 
  /* [7][1][][] */ -50,19,-16,11,17,12,4,0,6,0,30,9,-13,-83,9,4,-50,-102,-42,-31,-13,31,-16,45,5,-14,-5,5,-67,-1,-27,-3, -72,6,-90,18,17,-33,36,20,14,-16,-5,3,40,30,-31,-27,-11,-72,-28,-15,-18,19,10,32,-21,-44,-9,-62,-3,-7,-20,-36, -51,-27,-88,-3,26,-16,-22,10,48,5,7,52,-45,40,-14,-5,-5,-51,-22,-18,24,40,11,-20,-12,-53,-17,-64,-8,-9,6,8, 
  /* [7][2][][] */ -48,-9,-30,-68,32,14,18,16,27,23,9,8,-18,-83,-3,25,-51,-3,17,5,4,-10,19,39,12,-33,36,15,11,6,-26,25, -34,-4,40,-14,16,3,-9,25,-1,22,13,-37,-35,-28,21,28,-46,-7,28,-11,34,13,0,37,40,-3,27,26,27,20,-50,8, 4,-12,-1,1,-30,28,-24,0,12,6,17,13,-25,-80,7,17,1,19,40,-3,35,38,29,24,37,-36,17,5,55,6,2,32, 
  /* [8][0][][] */ 13,-110,-10,-16,-47,-8,-51,-2,-120,-17,26,-113,-101,-33,36,-67,31,4,21,-13,-19,18,-19,25,-11,-24,-29,-80,-6,-93,37,-69, -32,-48,17,-4,-14,-8,-44,-4,-44,-6,12,-87,-38,-35,12,13,2,-7,-9,24,-43,-2,-74,13,-5,-3,0,-1,-35,-21,-15,-94, 0,17,51,-4,-26,-17,-67,2,-55,4,26,-60,10,-98,19,17,10,-41,15,5,-31,23,-127,-20,19,37,1,-92,-122,-27,25,-25, 
  /* [8][1][][] */ -51,43,-14,23,-20,-60,-39,-18,-39,-2,-38,-53,76,14,1,9,24,-50,-16,-24,-58,-31,-68,-69,-10,-11,-11,-24,-86,-2,40,-97, 9,25,44,40,5,-3,-19,-13,-3,-11,3,30,33,-78,17,4,7,-47,-7,21,5,10,-19,-23,16,19,-7,-44,-59,-1,28,63, 4,20,44,31,15,-11,-15,35,-44,38,-24,-18,23,-47,9,27,-42,-7,-27,20,-16,-30,-2,-3,-17,9,-13,-44,5,26,-21,29, 
  /* [8][2][][] */ 9,8,55,38,13,-7,-27,22,-22,23,-12,26,17,-42,46,-13,50,-67,-26,-3,-84,9,-99,-46,13,-2,-11,-31,-90,-8,30,-42, -12,38,39,37,30,26,15,28,-20,1,-28,-14,16,-37,15,-3,14,-34,-17,48,-14,-18,-26,45,-2,2,5,2,2,13,30,-4, 26,-6,-14,16,-24,3,-3,-9,3,0,-58,-14,20,-67,-48,-5,-118,29,-43,18,13,-17,-6,7,-38,11,-11,28,39,-12,-116,43, 
  /* [9][0][][] */ 0,-93,8,-65,-26,-67,-3,-35,-12,-24,124,-70,-73,28,16,-50,-16,56,104,-8,2,40,-26,16,-36,-2,-46,-43,90,-24,10,-106, -24,-74,-11,-88,-28,-89,54,-35,-37,-49,45,-127,-31,35,-39,-39,-8,-2,60,-32,-27,-27,-5,-41,-13,-13,-34,10,32,-41,-27,58, 16,-17,-87,-36,-13,24,-13,-48,-47,-10,30,-30,-41,37,11,-54,-6,38,-45,-16,49,-69,21,62,3,-9,1,36,32,-23,-15,10, 
  /* [9][1][][] */ -34,-3,-22,-44,28,-66,66,-13,31,-6,-13,16,4,89,-33,0,24,-36,-6,34,-73,-22,-2,31,-9,-2,33,-16,-39,30,15,1, -51,26,-33,-42,-4,-53,50,-2,40,4,38,-3,12,92,19,27,48,-41,29,-5,-84,-25,-24,24,-65,8,17,-85,-25,24,19,-12, -41,-5,-24,-116,-12,9,-11,-21,34,-29,39,5,22,45,-5,-3,11,0,23,-17,30,6,-5,32,0,-26,-31,-89,-37,-19,-9,-10, 
  /* [9][2][][] */ -48,18,-33,-30,28,-58,72,-12,52,-21,-51,18,32,36,-5,-55,46,-45,-64,4,-47,-113,-9,7,-2,22,-1,-18,-37,4,12,-32, -41,-41,-64,-92,39,-28,66,-27,38,-24,3,1,85,65,-32,-10,17,40,30,11,-6,-55,33,28,-25,14,21,-17,34,12,-15,8, 21,-61,-41,-57,10,3,1,-13,8,-2,55,-53,50,78,-30,5,-3,86,60,-20,46,3,35,36,5,-42,27,-14,56,11,-15,-15, 
  /* [10][0][][] */ -11,-93,-26,26,-36,-29,-32,-23,-28,-34,-19,2,-36,29,26,-37,33,19,1,-5,-1,-33,7,-68,-14,-26,-7,-67,13,-64,14,-41, 35,7,111,40,3,18,-30,15,-54,28,2,-25,19,-17,6,43,11,23,-33,0,19,4,-3,3,4,-45,16,-28,7,9,-1,-14, 104,32,27,51,-20,31,-37,-15,-24,-9,11,37,-21,-97,15,-8,-41,62,24,-2,45,69,38,-68,-8,-53,-9,-45,20,-3,-48,16, 
  /* [10][1][][] */ 40,52,-16,-2,21,51,83,7,35,-2,20,-17,-28,21,-27,-27,4,-1,12,13,35,-16,81,25,-21,7,-25,-11,20,6,-9,21, 95,8,21,65,-27,42,-50,-37,-43,-22,44,-18,-11,-116,65,-19,8,55,77,-10,65,57,52,-16,-30,-43,9,20,80,-28,-43,38, 35,-16,-42,47,-36,-30,-71,9,4,-30,-4,-16,-76,-70,-24,-46,6,-2,-22,-29,16,20,59,-14,12,-59,2,8,18,-56,20,-31, 
  /* [10][2][][] */ -91,-89,-45,-53,-29,50,13,-14,-4,-40,39,-37,-61,15,-1,-8,7,-13,127,10,-21,43,10,70,18,-75,-11,39,64,-21,-32,-60, -30,-53,-6,-7,18,32,24,18,-48,-17,44,-31,-59,-39,-19,-4,-8,2,104,-57,-33,42,64,93,2,-87,-40,-24,-8,-2,-58,-52, 34,-20,-52,3,-11,3,8,-9,-49,3,64,-66,-18,-10,23,-20,52,-56,52,7,-14,44,26,-7,30,-12,2,62,19,6,-13,10, 
  /* [11][0][][] */ 17,28,-3,-4,-14,-48,7,-8,19,6,-127,-29,38,-69,-76,20,-33,-37,-54,-27,-19,-80,-65,-31,-25,37,-20,24,-37,-3,-85,0, 3,19,17,9,53,-22,61,-8,-10,-27,-95,75,10,48,26,0,10,-16,-3,11,-2,-1,-24,-37,-1,-3,-6,32,-6,22,19,23, -28,34,-5,61,53,-48,53,34,23,33,-105,7,71,9,13,1,41,-116,-115,7,-64,-26,-37,-40,37,45,40,45,-30,38,77,-37, 
  /* [11][1][][] */ 30,36,-12,7,-8,-41,18,5,69,-3,-79,32,35,-13,-62,25,39,-44,-16,-31,-63,-35,-73,-21,-73,45,-60,-11,-46,5,-60,-19, 11,-91,-36,-38,60,-36,72,6,-8,-35,-79,19,40,67,-13,-12,17,-12,-53,-10,-15,-71,-15,-61,-1,-8,-10,12,15,11,23,-39, -71,11,18,-15,43,-52,38,8,-30,9,-62,14,65,0,-6,9,23,-90,-14,0,-73,-21,-36,-35,28,33,32,38,-47,40,56,-26, 
  /* [11][2][][] */ -15,26,-33,-57,1,24,-6,-28,38,16,29,31,27,18,-70,21,8,9,-1,10,-92,-3,-114,12,-81,32,-21,0,-6,25,-30,-48, 13,-6,-23,1,-48,46,-1,-66,-85,-91,-86,23,14,23,-19,-74,19,14,-37,-39,11,-68,16,-15,-30,12,-60,-19,19,-78,-2,-13, -36,20,-15,-26,15,-68,48,14,-20,-12,-91,25,75,88,13,-16,11,-36,-65,-6,-62,-38,-39,-64,24,30,-2,23,-19,13,25,-47, 
  /* [12][0][][] */ -1,-17,-30,-4,-6,51,-9,-28,-16,-4,29,-27,-58,75,-29,0,-20,-51,-49,28,34,5,52,26,-14,-54,-1,14,-2,13,-40,96, 51,6,-11,-14,10,-36,10,-5,34,-18,5,-13,4,53,-26,17,8,-82,-48,14,-77,-4,-40,-16,-16,-25,-5,-16,-61,8,-11,-48, 84,32,-60,24,-21,-17,-9,-26,22,-28,20,-6,-4,89,-13,-22,-29,-35,-9,17,-1,64,-10,25,-15,-36,-27,37,-53,-2,-32,29, 
  /* [12][1][][] */ 22,40,23,11,-1,22,-19,-4,-13,5,28,33,-1,45,-6,-8,-2,0,-36,19,37,44,5,23,-12,-45,-39,-3,7,-9,1,22, 10,4,-7,24,-10,-5,10,-3,3,-5,-41,23,-8,66,-5,-4,17,-35,-27,37,24,17,30,34,34,-33,-2,4,-2,-8,10,40, 25,-21,-125,-25,-8,0,-9,-18,42,-7,15,25,-43,99,-78,-21,-15,-42,-49,42,-30,5,11,67,14,-96,21,5,-61,38,-86,-20, 
  /* [12][2][][] */ 57,34,-4,-10,-8,6,2,-31,15,-22,29,57,19,98,-51,-18,34,22,-36,13,-21,13,0,27,16,11,-5,45,9,0,31,8, 38,55,1,30,-14,22,-5,-19,8,-24,16,46,32,28,20,-3,1,-14,-31,22,-6,68,13,14,19,-12,-19,-9,-33,-14,28,-16, 26,10,9,75,-11,22,-42,9,11,18,-22,26,-7,-40,54,-12,26,-86,-127,21,-4,53,6,0,46,-26,21,41,-88,-21,62,-1, 
  /* [13][0][][] */ -24,7,10,65,-13,29,-18,-16,-36,-17,4,-28,-37,-48,9,-31,-19,-96,-6,-26,-12,32,-11,-34,10,-20,-19,-97,-127,-38,3,-23, 42,-3,7,23,-16,-15,4,-22,27,-61,9,17,-20,-3,2,-46,-11,43,-2,-20,1,3,45,8,-25,-38,-46,-37,67,-35,11,-20, -5,9,11,20,-22,-25,16,-27,-6,-57,-24,-14,15,55,-31,-27,-12,-54,-33,-39,-14,-25,-25,-52,-19,-8,-8,0,15,-34,4,-13, 
  /* [13][1][][] */ 38,-13,39,20,-13,52,-30,21,4,14,34,2,-101,-22,-14,7,-46,-22,24,10,32,17,23,48,-23,-36,-2,-31,-17,7,-57,19, 38,-14,-11,-12,-10,7,7,-11,15,-31,53,22,-54,100,-55,-13,-29,53,40,17,-7,20,33,63,23,-58,-8,20,36,22,-20,40, 46,0,-11,-7,-4,11,28,-35,28,-21,42,17,-3,92,-48,11,-15,75,73,-19,4,9,21,39,2,-14,-24,7,39,-18,-45,1, 
  /* [13][2][][] */ 3,9,-6,-20,-18,11,32,-38,38,-27,-10,82,-20,101,-21,1,2,12,-48,8,29,-39,19,41,-19,-21,-13,28,35,-3,0,37, 54,-10,-37,25,-40,-24,-7,-35,39,-33,25,7,-4,60,-61,-17,14,6,7,6,8,-11,36,67,-14,-6,-8,-13,11,-11,-5,18, 9,8,-32,6,-14,-14,13,-63,28,-44,30,11,4,50,-69,-35,28,24,-14,-8,-39,-44,7,45,-3,4,3,5,0,-19,-8,-21, 
  /* [14][0][][] */ 21,-21,33,-17,-21,38,-16,-17,-14,21,46,17,-70,-4,-38,-4,-51,79,70,9,6,15,25,71,-9,-50,4,-31,67,0,-52,15, -26,-19,-16,-40,-14,10,-26,-4,15,21,44,6,-53,-21,-26,2,-36,12,36,39,-12,3,-8,78,26,-24,8,-29,32,-9,-44,-7, 25,26,46,39,5,25,-20,-7,-16,17,-52,-19,27,-95,-1,3,8,-35,-33,38,12,-18,-4,-76,12,3,-14,-18,-13,-8,-12,-11, 
  /* [14][1][][] */ 19,-5,-10,4,1,44,35,-12,1,-4,68,31,-34,-33,-62,-13,-107,55,76,33,57,41,104,70,15,-27,-17,32,84,-7,-50,58, -15,-17,-8,-36,-12,39,-11,-7,4,-3,47,-33,-30,-13,-73,-6,-70,3,50,-4,31,6,17,-26,1,-9,2,14,46,-23,-53,10, -30,21,-12,-50,-11,-6,7,-32,13,-28,-22,-9,31,-66,-65,-11,-70,-15,16,-51,0,18,-17,-57,-24,6,-39,-15,-6,-9,-49,-13, 
  /* [14][2][][] */ -45,-34,-4,-27,-24,21,-24,1,6,-39,53,-20,-10,-13,-77,-24,-56,51,40,6,34,29,60,71,18,-21,2,27,48,-11,-63,-42, -64,-46,-18,-80,-31,42,-52,3,-20,-13,31,-50,-10,-31,-44,-20,-50,29,4,-72,6,-15,63,45,13,-15,-14,13,18,-30,-111,-15, -37,23,-35,-35,-46,-46,-20,-45,-7,-32,5,-71,29,30,-118,-19,-117,-17,-11,-28,-39,-59,-15,7,-105,-8,-72,-23,-15,-42,-127,2, 
  /* [15][0][][] */ 33,-23,-20,58,-41,-5,-127,-18,-58,-9,30,23,-95,-109,39,-10,1,-1,-41,-31,0,12,15,65,-12,-36,-18,13,1,-18,-27,-6, 7,27,17,0,-11,-11,4,5,-59,-19,-41,-2,61,-66,41,-2,26,-60,-40,12,-6,-30,-54,-25,20,37,6,-1,-23,-4,33,-18, 52,59,58,38,-13,19,12,7,21,-26,-44,-3,53,14,10,12,13,-49,-23,-28,-12,-11,-19,-28,9,40,-16,-7,-31,-33,-22,30, 
  /* [15][1][][] */ -19,-31,8,2,-12,-37,-29,-23,-115,-8,-18,-12,-91,-69,52,-7,48,-39,-5,-3,-23,-10,-38,-40,12,-22,-4,23,-15,-8,14,-27, 11,51,69,25,9,-22,39,-9,-9,-13,-13,22,43,21,18,-26,41,-17,13,21,-13,-18,-10,35,23,26,-11,-2,-11,-13,79,-12, -12,-3,19,33,-24,7,9,-37,31,-44,-10,-10,9,30,-58,-38,-43,6,-19,-37,2,-8,-28,-54,-21,1,-44,-3,26,-10,-77,17, 
  /* [15][2][][] */ 31,43,27,30,2,-13,22,-4,-36,-17,-27,30,28,-30,39,-21,40,-68,-7,-33,-46,-58,-91,-25,14,29,7,-33,-67,-9,18,-38, 9,30,32,11,-6,-12,28,-17,32,-49,39,44,54,3,0,-25,30,12,-14,28,-17,-27,-3,23,24,19,11,13,56,-6,37,-12, 36,-19,-32,4,-27,13,-37,-35,-11,-30,43,-38,-38,-39,-31,-13,-77,49,2,-46,24,1,29,16,-46,-38,-35,-8,14,-54,-107,2, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0066063003614544868, 0.0073422258719801903, 0.007066541351377964, 0.0077689290046691895, 0.0075770360417664051, 0.0066891564056277275, 0.0067551974207162857, 0.0072490149177610874, 0.0078169647604227066, 0.0074337208643555641, 0.0049385572783648968, 0.0065440274775028229, 0.0071503357030451298, 0.0075206239707767963, 0.0073042553849518299, 0.0074539138004183769, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { -9434, -5902, -1513, -6856, -1637, -3212, -1225, -3525, -1575, 733, -6390, -169, -7345, -927, -2131, -2261, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 4.6064542402746156e-05, 5.119602064951323e-05, 4.9273719923803583e-05, 5.4171345254871994e-05, 5.2833307563560084e-05, 4.6642282541142777e-05, 4.7102774260565639e-05, 5.054607754573226e-05, 5.4506286687683314e-05, 5.1833998440997675e-05, 3.4435670386301354e-05, 4.563032416626811e-05, 4.9858004786074162e-05, 5.2439958381000906e-05, 5.0931259465869516e-05, 5.1974799134768546e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[10*784] = { 
  -35, -41, -33, -31, 11, -32, -49, -8, 9, -28, -14, -35, -12, -34, -9, 11, -20, 2, 1, -34, 4, 4, -31, -8, 8, -7, -19, 21, -10, -52, -28, -81, 2, -17, -18, -10, -36, -2, -33, -2, 2, -5, -7, -77, -7, 14, -42, -36, 4, -10, 8, -16, -11, -3, -59, -3, 0, -5, -18, -49, -5, 10, -15, -27, 3, -37, 23, 2, -2, -5, -63, -9, -10, -5, -22, 4, -2, 12, -32, -27, -8, -3, 5, 29, -28, 4, -45, -1, -18, -4, -11, -22, 1, -14, -57, -29, 3, 0, -24, -23, 9, 12, 13, -7, -81, 18, 10, -11, 17, -1, -26, -29, 2, -16, -21, -2, -15, 8, -36, 3, 10, -25, -9, -3, 8, -40, -28, -4, -1, -14, -34, -5, -38, 2, -14, 0, 8, 2, -15, -10, -18, 2, -31, -12, -4, 5, -20, 1, -19, -2, -14, 1, -3, -21, -12, 13, 18, 9, -16, -26, -4, -5, -7, 10, -12, -4, -61, -2, -4, -5, -25, -12, 15, 5, -16, -16, -6, -2, 1, -6, 1, -2, -55, -2, 1, 4, -22, 2, 13, 4, -26, -22, -23, -3, 6, 9, 9, 4, -27, -2, -28, 3, 6, 7, 29, 9, -39, -14, -13, 5, 5, 0, 19, -37, 19, -30, -69, 6, -41, 12, 15, -5, -48, 8, -12, 2, -1, 6, -5, 7, -36, -36, 10, -34, -22, 5, -8, -23, -8, 5, -2, 0, -11, 8, -28, 2, -9, -8, 6, -24, -10, 0, -11, 18, 22, 10, -7, -26, -12, 3, -22, 0, -22, 5, 11, -24, -28, 1, -6, 18, 3, -6, -9, -10, 2, 7, -8, 10, -28, 1, 5, 4, -13, 2, 0, 8, -3, -6, 3, -15, 13, -26, 8, 3, -26, -8, -2, 10, -8, 12, 18, 6, -24, 5, -12, -2, 7, -4, 12, -2, 20, -9, -10, 17, -1, 14, 16, 7, -19, 1, -30, 12, 0, -5, 14, -34, 12, 8, 2, 16, -7, 5, 11, 6, -10, 14, -17, 23, -8, -2, 11, -19, -27, -18, 14, -11, -54, 12, 2, 34, -50, 11, 1, 8, 9, 5, -27, -6, -22, 13, 5, 1, -22, 7, -13, 7, 35, 4, -10, 4, 6, 11, -11, 19, -12, -18, 16, -14, -15, 5, -21, 16, 29, 4, 0, 0, -4, 1, -5, 17, -22, -23, 2, 11, -4, 9, 0, 10, 18, -7, -10, -1, 9, -32, 1, 11, -29, -29, 9, 9, 5, 8, 11, -1, 1, 7, -17, 1, 7, -36, 0, -4, -12, -12, 5, 4, 24, 0, 7, 23, 0, -5, -62, 1, 2, -28, -7, -20, 10, 1, -22, 12, -2, 8, 22, 13, -11, 12, -10, -15, 5, -5, 8, -27, -56, 12, 7, -21, -27, 15, -12, 11, 0, 4, -12, -20, 0, -3, -4, -8, -24, 6, -7, -28, -14, 8, -5, -2, 16, 0, -2, -5, 8, 8, -2, 5, -17, 9, -11, -18, -20, 17, -1, 15, 10, 4, 7, 18, 10, -3, -17, 15, -12, 7, 9, 0, 1, 5, -5, -3, 15, -20, 2, -2, -14, -14, -43, 11, -26, -6, 7, 22, 11, -3, -15, 19, 8, 0, 11, 0, -19, -9, -19, 0, 4, -35, 3, 32, 2, 1, 10, -7, -5, -1, -70, -2, -31, -26, -9, -53, 5, -32, 4, 2, 15, 10, 28, -24, -19, -6, -13, 2, -2, 6, 3, -66, -25, -7, -1, -39, -27, 8, 5, -14, -15, 23, 4, 8, 4, 4, -11, -10, -31, -3, -29, -23, -6, -5, -14, 11, 7, 3, -1, 11, 5, 2, -9, 0, -18, 2, -28, -25, -6, 4, -19, 10, 10, 6, 9, 2, 6, -4, -23, 4, -25, -5, -11, -26, -3, -10, -34, 7, 5, -12, 9, -6, -2, -6, -76, 3, -15, -4, -4, -38, 2, -17, -29, -2, 2, 3, 19, -9, -21, -29, -105, 8, -9, -15, -3, -76, 10, -7, -13, -9, -5, -2, -31, 16, -85, -32, -79, -30, 15, -42, 7, -15, 0, -6, -77, -40, -9, 4, -14, 16, -37, -11, 14, -36, -8, 19, 9, -23, -18, -5, -28, -13, -19, 6, 4, -11, 5, -12, -8, 2, -53, 18, -95, -30, -3, -11, 3, 11, 11, -28, 10, -16, 12, 0, -8, 2, -28, 10, -107, -1, -8, 12, 2, 11, 9, -14, 18, -13, 15, 0, -57, -4, -11, -5, -49, -9, 8, -44, -4, 0, 4, -32, 13, 4, 20, -8, -60, -3, -9, -20, 3, -37, 0, -47, -1, 19, 2, -18, 18, -21, 11, -13, -81, 8, 8, 0, -8, -61, 3, -21, -95, -8, -1, -23, -17, -21, -68, -14, -24, -73, 19, -14, -7, 16, 15, 9, -12, 7, -13, -7, 
  -36, -13, -17, -36, 12, -4, 16, -24, 21, 32, -15, 5, -40, 22, 16, 15, -4, 0, 9, -14, 34, -12, 7, -25, -22, -1, -1, 12, -7, -6, -25, -56, -77, 1, 18, -23, 23, -8, -13, -38, -1, 15, -29, 25, -48, -32, -20, 34, -54, 1, 8, -2, 4, -19, 16, -33, -4, 10, -33, 32, -53, -65, -6, 19, -6, -7, -43, -12, 0, -16, -7, -22, 6, -1, -33, -9, -32, -51, 31, 6, 20, -2, -35, 4, -6, -2, -37, 1, 9, -8, -30, -11, 9, -25, 2, 3, -13, -25, -10, -26, -51, -47, 33, -16, -53, 13, -42, 4, 3, 17, 12, -29, -52, -56, -26, -46, 29, 26, 3, 13, -9, 40, 1, -6, -20, -27, -3, 6, -48, 0, 9, -52, 11, 18, -10, -4, -20, 30, -15, -4, 13, -40, 9, 7, -40, 0, -7, -43, 17, -4, 9, -9, -9, 16, -11, 25, -58, -31, -39, 27, -82, -19, 7, -22, 13, -20, 16, -13, 4, 1, -8, 13, -51, -44, -1, 19, -29, 12, -56, 11, 1, -11, 10, -18, 11, 1, -18, 9, -35, -39, -11, 2, -17, -5, -18, -13, 8, -20, -36, -14, 11, 7, -45, 3, -29, -27, 7, 2, -35, -10, -5, -27, -39, -13, 37, -29, 1, 20, -27, 5, 11, -14, 18, -5, -3, -62, -37, -36, 13, -29, -10, 3, 7, -1, -5, -11, 11, -13, -20, -3, -32, -7, -28, -103, 22, -4, -4, -7, -2, 34, -24, 6, -54, -16, 35, 2, -19, -15, -3, -37, 6, -13, -6, -9, -18, 8, 0, 16, -27, -4, 35, 12, -63, -14, -1, 1, 8, -38, 1, -28, 20, 7, -10, 10, -15, -31, -47, 10, -68, 3, -42, -7, 9, 3, -20, -14, 15, -5, -33, 23, -85, -28, -13, 8, -24, -5, -64, 10, 4, -45, -38, -17, 26, 8, -24, 9, -28, -17, 21, 14, 17, 12, -43, 2, -65, 12, 27, 6, -42, -12, -34, -5, -3, -52, -4, -4, 4, -38, -86, -58, 17, -18, 3, -16, 24, 23, -1, -17, -16, -49, 31, 21, -39, 10, -24, -70, 0, 7, -2, -27, 4, 9, -10, 10, -46, -48, 34, 14, -70, -18, -31, -43, 22, -4, -11, -18, 17, -1, -8, 4, -45, -85, 14, -2, -47, -29, -8, -19, 19, -125, -1, -47, 12, 24, -9, 6, -31, -12, 22, 1, -63, -4, -38, 17, 16, -127, 6, -8, -2, 3, -27, 16, -56, -24, 2, 1, -54, 14, -42, 6, 16, 11, -33, -18, 19, -1, 11, 1, -25, -35, -24, 8, -5, -34, 10, -4, 1, -65, 30, -15, -44, -16, 5, -16, -12, 4, 5, -55, -7, -64, -22, -15, 23, 15, -10, 12, -7, -13, 22, -21, -36, 11, -4, 11, -46, -32, -25, -83, 4, 34, 4, 15, 1, 23, -3, 19, -64, 4, -2, 17, -23, -30, -30, -41, 22, 39, 4, 1, 1, 23, -1, 11, -77, -4, -7, 10, -31, -34, -3, 5, 13, -33, -23, 9, 2, 6, -25, 13, -29, -16, -18, 4, -27, -24, 16, 3, 16, -9, -2, 17, 10, -1, -9, 16, -65, 8, 7, 7, -65, -10, -5, -7, 19, 18, -22, 0, -4, 12, -38, 1, -99, 13, 12, 11, -30, -49, -44, -45, -75, 27, 33, 15, 6, -18, 8, -5, -54, 5, 0, -55, -10, -31, -32, -33, 8, 17, 14, -8, 0, 13, 19, -12, -27, -6, 10, 0, -80, -29, -70, -41, 4, 27, 3, 9, 2, 20, 6, 10, -81, 30, 9, 31, -24, -21, -33, -10, 16, 10, 12, 4, 7, 4, -6, 11, -50, -9, 8, 10, -36, -7, -14, 3, 26, -7, 1, 7, 15, 11, -9, 6, -33, 4, -5, 6, -47, -1, 10, -5, 19, 19, -31, 14, 36, -5, -15, 24, -57, 15, 17, 7, -17, -22, -10, 8, 13, 12, -24, 18, 10, -16, -13, -7, -33, 9, 6, 20, 16, -55, -1, -59, 22, 28, 30, 31, -23, 28, 17, -14, -9, 8, -2, -27, -28, -27, -34, -46, 24, -23, 22, 3, 37, 19, -8, -35, -20, -26, 3, 19, -36, -46, -52, -35, -19, 14, 19, 11, 23, 16, 10, 4, -38, 0, 15, 26, -51, 5, -52, -17, 27, 4, 10, 4, 0, 17, 0, 1, -43, -25, 8, 12, -41, -6, -23, -1, 15, 12, 7, -4, 16, -28, -20, 12, -27, -24, 6, 17, -26, -30, -8, -10, 15, 22, -5, 9, -7, -31, -29, 16, -46, 12, 2, 3, -21, -26, 8, -34, 28, -12, -1, 1, -17, 24, 1, -2, -10, 28, -3, 7, -9, -27, 35, -32, 15, 29, 36, -4, -16, 51, -36, -12, 17, 10, 30, 3, 
  26, -35, -28, -5, -15, 23, 8, -9, -5, -15, 16, -20, -9, 1, 16, -18, -23, -24, 2, -42, -16, 10, 14, 12, 4, -3, 3, -7, 7, 13, -1, 20, 14, -20, 17, -24, 3, 7, 20, 4, -15, 18, 1, -27, 16, 17, -18, 5, -8, -27, 23, -4, -11, 5, 20, -2, -13, 15, -8, 16, 18, 7, -68, -28, -48, -22, 11, -44, 4, 6, 29, -10, 2, 0, 7, 27, 10, 11, -94, -17, -14, -14, 7, -46, 13, 0, 3, -30, -5, -3, -12, 29, 13, 14, -29, -24, -28, -17, -30, -31, -8, -13, -15, -69, -30, 10, -31, -25, 3, 2, -48, -16, -18, -52, -52, -41, -21, 7, 14, -1, -7, 4, 9, -36, -22, 2, 27, -9, -62, -42, -28, -64, 2, 5, 9, -1, 8, 1, 8, -8, 14, 14, -11, -5, -32, -51, -9, -46, -5, 5, 10, 3, 3, 7, 11, -16, 16, 19, -4, 1, -14, -36, -1, -72, 2, 2, 17, -2, -3, 9, 2, 6, 8, 3, -32, -16, -44, -16, -2, -76, 12, -1, 21, -13, -35, 10, -4, 25, 9, 6, -43, -9, -26, -8, -18, -37, 14, -31, 14, -14, 3, 5, -8, 15, -1, 12, -15, 11, -76, -11, -42, -32, -6, -24, -16, -34, -79, -4, 7, -2, 6, -18, -36, -10, 1, -28, -32, -28, -3, 1, 3, 12, -2, -4, 1, -37, -18, -25, 12, -18, -15, -8, -59, -18, -35, 4, 7, 7, -1, -4, 5, -16, 19, 7, -13, -2, -10, -30, -25, -9, -15, 11, 9, 4, -3, 8, 5, 5, 15, 11, -21, 8, -13, -11, 6, -12, 20, 2, 12, -11, -16, 9, 6, 12, 6, 10, -12, -5, -5, -10, 0, -11, 7, -12, 6, -6, -13, 17, -1, 8, 3, 3, -8, -1, -7, -7, -10, -13, -7, -7, -18, 4, -20, 6, -11, 0, -11, -3, -15, 4, 13, 3, -18, -23, -7, -33, -11, -2, 6, 3, -37, 3, -6, 11, 9, 4, -19, -21, 1, -11, -16, 11, -1, -9, -6, -21, 18, -19, -22, 5, 13, 3, 1, -18, -20, -2, -1, 21, 8, -6, 4, 0, 16, -16, 9, 11, 7, -5, -2, -18, -18, -12, 0, 18, 3, -8, -2, 5, 13, -7, -1, 13, 1, -9, -2, -16, -15, -5, 2, 15, 3, 5, 2, 5, 13, 0, 5, 2, 8, 2, 1, 6, -9, -7, -8, 19, 13, 12, 0, 9, -10, -17, -12, -2, -2, 2, 4, 4, -7, -3, 1, 2, 13, 6, 5, -1, -37, -7, -9, 4, 10, 4, 6, -2, 31, 18, 7, 21, -12, -29, 5, -16, -12, -4, 7, -6, 2, -10, -9, -13, -25, -16, -27, 50, 9, -10, -8, -8, 4, -6, -37, -40, 9, -19, -17, 3, -9, 2, -22, 4, 4, -15, 6, -19, 7, -5, -10, 4, -13, -17, -1, 2, -2, 17, -3, 1, 7, -5, 16, -29, 2, -12, -2, -5, -8, -20, 1, 0, 6, 15, 16, 7, 0, 7, 4, -14, 2, -29, 9, 7, 5, -16, 4, -18, 7, 14, 11, 18, -3, 14, -8, -21, -16, -24, -2, 15, 5, -6, -2, -14, 6, 16, 9, 5, -46, 5, 30, -22, -15, -17, -14, 11, 7, -5, 25, -13, 11, 14, 2, -2, -8, 7, 39, -22, 3, -7, -1, 11, 11, 8, -19, 14, -4, -23, -11, 15, -2, -6, -2, -19, -7, 0, -19, -42, 20, -29, 9, 11, -7, 15, -50, -5, -6, -3, 15, -27, -6, 4, -3, -2, -11, -23, -1, 10, -4, 15, 15, 8, -3, 5, 19, -33, 5, -10, 5, 7, 2, -13, 8, -12, 8, 16, 9, -2, -4, 1, 22, -59, 1, -20, 7, 8, -3, -14, 6, -26, 12, 7, 28, 3, 1, 7, 26, -35, -5, -10, -3, 21, 0, -19, -17, -18, 11, 20, 15, -3, -31, 21, -9, -32, 4, -26, -4, 11, 9, -14, -6, -27, 27, -2, 14, 42, -13, 17, 3, -17, -16, -8, -33, 10, 1, -10, -7, 15, -24, -6, -14, -12, -3, 0, -8, -8, 4, 13, 0, -35, -28, -8, -9, 17, 6, 7, -24, -1, -8, -27, 1, -22, -2, -4, -5, -14, -13, -48, 12, 14, 7, 18, -5, 1, -11, -39, 13, -45, 4, -22, 12, 3, 4, -33, 5, -21, 8, 17, 10, -1, -16, -3, -19, -23, 1, -33, 4, 1, 0, -66, -7, -49, 22, 17, 17, -1, -35, -2, -23, -38, 1, -42, 12, 4, 1, -23, -15, -55, 18, 2, 24, 10, -24, 22, -3, 11, -15, -17, 9, 4, 4, -14, -3, -31, 31, -27, 21, 10, -1, 51, -1, 3, -1, -43, 4, 25, 14, -22, 
  4, -7, -37, -30, -21, -5, 12, 9, -4, 6, -4, -25, -18, -12, -19, -12, -15, -19, -62, -52, 5, 11, 17, 4, 5, 8, 17, -11, 32, 19, 3, -26, -29, -21, -7, -29, 5, 9, 14, 10, 9, 11, 13, -76, 27, 4, -12, -25, 12, -16, 16, -8, 7, 6, 25, 9, -12, 16, 7, 26, 7, 4, -38, -10, 20, 4, 18, -2, 10, 1, 38, 6, -23, 9, -1, 24, 12, -2, -31, 7, -8, 21, -5, 19, 10, -7, -10, -5, -14, 9, 1, 21, 18, 1, -56, -22, 21, -5, -13, 9, 2, -4, -20, -4, -12, -6, -26, -2, 3, -22, -32, -8, -46, -34, -7, -64, -21, -1, 10, 1, 4, 8, 7, -32, -6, -3, -20, -13, -12, -38, -54, -51, -4, -2, 15, -5, 6, 6, 16, -28, 27, -7, -3, 2, -8, -14, -25, -14, -2, 7, 15, 7, 1, 16, 21, -45, 22, -5, -24, 5, -17, 2, 2, -23, 5, 10, 22, 2, -12, 8, 11, -13, 13, -1, -25, -15, -14, 12, 1, -1, 16, -5, 14, 5, -38, 13, -3, 25, 7, 0, -12, -14, 3, 5, 0, 16, 3, -15, 42, 4, -44, -3, 5, -3, -4, -10, -24, -27, 53, 5, 7, 29, 10, -75, -21, 22, -54, -7, -15, 1, 25, -10, -29, -14, -10, -34, -22, -37, -3, 18, 13, -9, -3, 22, -1, -55, -18, 31, 7, -15, 0, -53, -54, -41, 19, 1, 12, 1, 4, 7, 11, -55, 19, 3, -4, -1, -20, -29, -32, -23, -7, 12, 13, -7, -16, 14, 20, -53, 25, -1, -31, -7, -6, 6, -10, -2, 19, 3, 8, 0, -16, 9, 5, -16, 8, -4, -26, -12, -1, 17, -18, 10, -5, -27, 31, 1, -24, 0, 4, -7, -2, -18, -5, -10, -6, 2, -3, 0, -1, -11, 28, 2, -28, 1, -9, -7, 6, -18, -20, -20, 7, 5, 12, 8, -27, -29, -23, -18, -57, 2, -8, -11, 43, -40, -18, -7, -7, -51, -15, -11, -17, -11, 2, -3, -34, 0, 6, -59, 29, 16, -18, -3, 8, -54, -33, -34, 13, 3, 9, -15, -16, 13, 8, -42, 10, 9, -34, 6, 7, -21, -19, -14, 1, -11, 4, -20, -23, 5, 5, -27, 7, -7, -12, -19, 1, -17, 2, 8, 11, -3, 19, -9, -25, 13, 15, 1, 9, -9, -6, -13, 1, 2, -1, 11, 6, -13, 12, -9, -53, -5, 7, -7, 4, -12, -10, -11, 3, 14, 6, -3, -7, -25, 23, -7, -57, 12, 12, -4, 6, -14, -15, -11, 8, 4, -21, -22, 2, -40, -25, 13, -53, 11, 0, -6, 5, -29, -20, -51, -37, -20, -39, -37, -20, 0, 10, -2, -37, 13, -9, -45, -12, 25, 12, -34, 6, 3, -14, -27, 12, 12, 5, -13, -29, 5, 17, -22, -14, 19, -16, -29, -7, -18, -10, -13, -4, 11, 5, 1, -25, 22, 0, -32, 12, 3, 3, -19, 1, 11, -13, -32, 9, 7, 15, -9, -21, 19, 10, -18, 13, 3, 5, -5, -2, 30, -4, -32, -5, -4, 18, -25, 3, 11, 11, -2, 13, -15, 2, 2, 10, 12, 4, -15, -10, -17, 17, -22, 7, -6, 24, 2, 12, -17, -5, -10, -2, 16, -1, 3, 3, -47, -25, -41, -7, 9, -20, -5, 15, -30, -16, -18, -25, -56, -29, -42, 8, 10, 8, 26, -27, 24, -14, -20, -27, 18, -15, -21, -16, -13, 0, -12, 20, 1, 11, 12, -22, 21, 8, -8, -8, 1, -1, -34, -1, -16, -9, -18, 17, 5, 15, 11, -6, 22, 9, -19, 2, -7, -6, -30, -1, -9, 4, -22, -23, 5, 17, 5, -4, 17, 13, -23, 21, -1, 5, -1, -27, 1, -24, -30, -27, 4, 11, -21, 2, 41, 13, -19, 15, -14, 6, 0, 8, 20, -22, -10, -34, 9, 20, -61, 5, 48, 18, 10, 13, -18, 1, -10, -8, 24, -18, -12, -8, -41, -27, -33, 8, -10, -7, 7, 8, -36, -11, -6, 12, -22, 38, -9, -17, 9, 3, -1, -14, 3, -13, -3, -6, 32, 5, -18, 16, 1, 0, -8, 6, 8, 13, 14, -7, 38, -2, -15, 9, 30, 7, -34, 1, -33, -6, -22, -27, 12, 20, 33, -4, 26, 19, -10, 3, 16, 11, 8, 2, -18, -4, -18, -25, 9, 21, 13, 5, 27, 9, 0, -5, 15, 12, -7, 5, 10, -29, -6, -51, -3, 31, -1, 4, 6, 25, -38, -18, 5, 8, -12, 14, 31, -28, 2, -67, -2, 45, 6, 18, -68, 21, 11, -41, -18, 10, -13, 35, 27, -57, 33, -40, -16, -22, -19, 18, -29, 13, 9, 3, -14, 2, -10, 
  -5, 27, 6, -8, 10, -10, -13, -17, 4, -15, -2, 6, 21, -22, -5, -1, -15, 19, 7, -6, 23, -5, -34, -43, -9, 16, -36, -17, -20, -52, -22, 31, -40, 8, -28, 21, 9, -24, -10, -37, -2, -16, -23, 6, -19, -53, 4, 14, -47, 16, -26, -1, 17, -29, 9, -30, 1, -3, -31, 32, -38, -47, 11, 14, -83, -4, -33, -17, 13, -14, -57, -33, 8, -9, -28, 23, -46, -33, 41, 7, -28, 3, -30, 23, 24, -3, -33, 0, 12, 0, -35, -14, -48, -39, 8, 10, -27, -4, -18, 25, -21, 30, -3, 19, 26, -9, 22, 5, -47, -9, 38, 14, 35, 39, 21, 45, 10, -21, -26, 5, 5, -15, -31, 10, 9, -6, -30, 11, 3, 15, 0, 25, 24, -24, 6, -18, -6, 9, -52, -3, -45, -58, -33, 9, 14, 23, -6, 14, 14, -25, -3, -19, 0, -1, -44, -6, -33, -26, -12, 0, 31, 23, -12, 8, 8, -18, 0, -8, -4, -1, -33, 4, -14, -27, 9, 11, 24, 5, -12, 18, 5, -19, -2, -2, 7, -6, -28, -14, -8, -36, -3, 4, -10, 15, -34, 6, 4, 4, -38, 21, 8, 0, -47, -1, -47, -18, 20, 3, -12, 11, -26, 24, -8, -35, 2, 16, 39, 0, -18, 11, -33, -10, 21, 6, 8, 2, -1, 25, 7, 2, -3, -16, 3, -15, 12, 1, 7, -19, 15, 3, 8, 18, 8, 22, 23, -29, 6, 6, 11, -13, 3, -1, -20, -9, 8, -2, 6, 15, 8, 14, 21, -32, -8, 10, 5, 11, 1, -4, -21, -44, -28, 1, 7, 18, -5, 6, 3, -22, -2, 14, 3, 5, -2, -10, -10, -45, 4, 5, 8, 3, -1, -9, 16, -13, -9, 5, 12, 3, -20, 0, -23, -19, -2, 7, -17, 13, 3, 16, 14, 2, -18, 4, 27, -8, -33, 5, -25, -1, 17, 8, 17, -14, -9, 21, 0, 22, 0, 11, 31, -24, -23, 5, -55, -18, 19, 10, 10, -6, -10, 14, 5, -16, -2, 44, -8, -8, 7, -3, -13, 4, 35, 3, -13, 14, 4, 4, 21, -32, 5, 15, 17, 23, -4, 0, -23, -32, 24, 11, 4, 17, 8, 14, -2, -20, 10, 22, 3, 12, 8, -5, 3, -12, -19, 7, 7, 11, 2, 1, -6, 7, -11, 18, -17, -8, -5, -13, -4, -6, -28, -8, -1, -4, -6, 0, 4, -18, -15, 17, 9, -9, -23, -4, -19, -4, -1, -3, -26, 6, 5, 22, 9, -5, 13, 21, 17, -16, -51, 7, -50, 12, 21, 8, -49, -8, 13, 27, 14, 15, 6, 20, 48, -22, -17, 0, -35, -13, 8, 10, 14, 6, 2, 9, -7, -23, -2, 22, 7, 7, 14, -4, 11, -3, 21, 1, -13, 5, 6, 8, -9, -19, 0, 26, 16, 11, 1, 3, 15, -18, -17, 5, 6, 11, 2, 6, -26, -9, -4, 12, -4, 2, 9, -2, 2, -18, -24, 6, -1, -4, -3, 3, -8, -21, -10, 28, 10, 3, -2, 10, -20, 5, -10, 11, 0, -25, 0, 12, 11, -12, -20, 27, 4, -31, -9, 7, -5, 3, -6, 6, -17, -7, 2, 13, 16, -2, -3, 19, 4, -32, -12, 6, -28, 9, 6, 3, -49, 5, 12, 8, 29, -8, 7, -5, -16, -13, -24, 10, -48, -2, 14, 9, -6, 29, -17, -9, -6, -8, -16, -2, -7, -4, 16, -8, 1, 7, 7, -2, 6, 16, -12, 3, -50, -2, 4, 14, 10, -14, 2, -20, 4, -8, -18, 3, 5, -4, 2, 14, -35, -17, 6, 8, -10, -37, -10, 1, 0, -19, -21, 6, -4, -9, -5, 3, 13, -22, -4, 2, 4, 20, -17, 11, -8, -1, -19, 9, -5, -20, -5, 18, 10, -23, -1, 23, 3, -4, -20, 13, -15, 30, -19, 6, -17, -25, 9, 16, 19, -16, -45, 16, -56, -46, -32, 11, -6, 24, -2, 11, -33, -19, 19, 38, 20, -4, -2, 14, -27, -28, -19, 18, -17, 14, -7, -12, -14, -16, -1, -27, -10, -4, 2, -39, 1, -30, -7, 0, -28, -31, 2, -10, -36, -66, -5, -20, -31, -8, -19, -74, 2, -18, -10, 10, -6, -62, -6, 9, -60, -5, -38, -8, 10, -23, -5, -82, -21, -15, -24, 15, -38, -23, -27, 5, -72, 9, -7, -33, 20, -23, -21, -78, -9, 5, -12, 21, -29, -39, -19, 15, -57, 4, -21, -16, 13, -11, -7, -7, -17, 22, -28, 27, -27, -62, -26, 14, -42, -27, -20, -21, 19, -10, -17, -26, -24, -2, -26, 14, 10, -54, -18, 25, -43, -20, 20, -56, 9, 32, -9, -44, -30, -2, -5, 7, -27, -1, -19, -24, 
  12, 4, -16, -3, -21, 4, -42, 9, -16, -2, -14, 21, -23, -26, -17, -18, 37, 24, 27, 46, -21, -9, -37, -11, -25, -1, -3, 26, -35, 2, -16, -4, 27, 21, -15, 28, -14, -5, -28, 4, -5, 0, 5, -54, -26, -3, 31, -24, 17, 6, -5, -3, 9, 3, -29, 6, -1, -24, 8, -28, -13, -6, 28, 2, 25, 16, 9, 28, -2, 3, -43, 9, 14, -9, 7, -41, -24, 13, 47, 18, 3, 3, -18, -4, -11, 1, 14, 4, 10, -24, 12, -22, -7, 19, 37, 5, 5, -13, -8, -43, -31, -3, -11, 7, 10, -38, 21, -20, -12, 10, 31, 1, 13, 13, 13, 16, -10, -6, -15, -24, -12, -29, -12, 4, -15, 6, -36, -11, 15, 7, -4, 21, 5, 6, -24, 3, -8, -3, -11, 1, -35, 1, 3, -15, 18, 0, 8, 18, 18, 1, -34, 5, -3, -13, 0, -24, -30, -1, 29, -13, 9, -16, -19, 27, 3, 1, -29, 8, 1, -3, 11, -12, -40, 4, 29, -15, 15, -12, 11, 17, -12, -1, -15, 3, 20, -12, 8, -55, -31, 5, 34, 5, 9, -35, 14, 0, -4, 15, -18, 1, 23, -27, 7, -37, -34, 1, 16, -7, -24, -46, -10, -26, -6, 40, -7, -1, 2, -26, 10, -39, -39, -4, 27, -37, 32, 8, -3, 11, -26, -10, -2, -21, -5, -1, -2, -5, -19, -9, -28, -7, -7, 1, 6, 2, 5, 5, -7, -2, -8, 4, -3, 12, -22, -1, -23, -20, 3, 10, 5, 3, 1, 1, -5, -2, 6, -12, -10, 8, -18, -6, 13, -1, 8, -16, -1, 8, 0, 6, -12, 4, 13, -2, 0, -7, -28, 14, 26, 10, -1, -20, 12, 2, 7, 10, 8, -3, -11, -11, 18, -47, -10, 5, 21, -27, 12, -35, -10, -27, 11, 15, 16, 0, -33, -11, 2, -18, -19, 7, 6, -29, -25, -52, 1, -57, 1, 59, -3, -5, -9, -28, 21, -23, -34, 4, 2, -59, -22, -10, -4, -23, 6, -22, 6, -16, -26, 12, 6, -7, -25, -12, 22, -21, 6, 0, -8, -4, 7, -6, 2, -11, -12, -2, -7, 3, 3, -3, -6, -33, 0, -2, 5, 6, 2, 8, -4, -4, -9, -7, 4, -3, -3, 4, 15, -15, -4, 7, 3, -2, 16, 4, 2, -2, 10, 0, 0, 9, 7, 7, 12, -7, -5, -19, 7, -21, 2, 10, 8, -1, 17, 4, 1, 4, 2, 2, 0, -15, 17, -21, 1, -40, 2, 16, 0, -3, -22, 9, 21, -7, 8, -1, -1, -24, -15, -25, -32, -65, 6, 16, -11, 11, -18, 1, 23, -17, -33, 19, 4, -17, -14, 14, -2, -14, -2, -28, -2, -1, -23, 21, -8, -6, 21, 25, -42, -20, 4, 4, -6, -6, 22, 5, -3, 1, -34, 12, 8, -20, 0, 11, 15, -20, -2, -7, -3, -17, 2, 14, 4, -2, -27, 22, 0, -24, 2, 14, 13, -15, 4, -1, -7, -22, -2, 9, 13, -10, -3, 11, 6, -22, 6, 2, 9, -9, -11, 33, -9, -32, -12, 1, 12, -25, 0, 17, 8, -18, 8, -1, 1, -4, -8, 18, -2, -45, -11, 6, 9, -10, -3, 6, 18, -3, -2, 1, 5, -3, -41, 0, -8, -58, -8, -6, -23, -17, -20, 20, -33, -7, -26, -9, -1, -32, 9, -35, -10, -22, -1, 19, -3, -1, -43, 15, 14, -9, 5, 15, -12, -43, 4, -9, 4, -17, 15, 4, 8, -1, -63, 14, -3, -17, 24, 10, 1, -27, 1, 8, -3, -16, 18, 0, 6, 5, -8, 28, 5, -12, 2, 3, -3, -18, -4, 1, -2, -18, -16, 8, 4, 3, -13, 20, 12, -14, 21, -15, 3, -13, -16, -5, -4, -5, -24, -4, 16, -27, -3, 36, 14, -26, 11, -28, 1, -16, -12, 7, -27, -48, -38, 5, 31, -50, -10, 46, 6, 4, 0, -8, -8, -6, -40, 17, -34, -33, -31, -30, -23, -45, -17, 25, 27, 2, 6, -16, -15, -24, 9, -4, 27, 26, -17, 3, 8, 15, -27, 12, -13, -17, 27, 18, -6, -28, 2, -1, 8, 8, -22, 10, 10, 1, -30, 4, -1, 1, 15, 13, 2, -7, 6, 3, -5, -4, -8, 11, 20, 15, -10, 25, 5, -24, -3, 13, 8, -1, 8, 9, -5, -30, -13, 7, 13, 6, 22, 13, -1, -29, -8, 13, 7, -20, 9, -2, -11, 0, -36, 9, 24, 4, -10, 22, 15, -22, -9, 14, 5, -10, 4, 3, -10, 19, -41, -13, -19, -14, -37, -2, 10, -12, 12, -8, 4, -24, -21, 21, -33, 0, -26, -18, -27, -22, 1, -29, -6, -4, -27, -71, -14, 2, 
  -34, -24, -31, -17, 7, 14, -19, -49, -3, -7, 12, -21, -7, -22, -9, -9, -51, -41, -55, -25, 10, -26, -25, -31, 24, 1, -19, -10, 3, -56, -21, 26, -24, 9, -43, -11, -1, -9, -66, -43, 2, -36, -32, 39, -18, -28, 25, 20, -28, -13, -33, 38, 25, -8, -48, -22, 11, -41, -19, 21, -31, -7, 48, 14, -39, 26, -21, 29, 4, -10, -19, -14, 16, -23, -12, -10, -14, 0, 22, 28, -23, -46, -45, -28, 5, -2, 17, -18, 30, -10, -18, -22, -11, 1, 33, 14, -38, -20, 15, -12, -16, -14, 11, -35, 12, -15, 0, -11, -3, -1, 31, -21, -4, 4, -14, -49, 24, -12, -55, 0, 15, 1, -42, 5, 5, -4, -12, 7, -3, 11, 15, -5, 4, -14, -28, -16, 4, -13, -38, 12, -28, -6, -5, 21, 16, 20, -9, 17, 10, -32, -17, -18, 1, -34, -19, -1, -19, -5, 32, 11, 8, -2, -1, 20, -8, -15, -36, -14, 2, -37, -34, 13, -20, 9, 29, 10, 1, -3, -21, 15, 3, -14, -60, -12, 12, -28, -8, -11, -9, 1, 19, 5, 13, -25, -11, -6, -11, 5, -42, -8, 22, -11, 15, -32, -9, 9, 27, 6, -9, -20, -20, -35, -15, 36, 7, 2, 17, 0, 18, -40, -16, 14, 11, -11, -19, 1, 14, -28, 9, -36, -7, -14, 0, -39, -33, 1, -34, -55, -42, 7, 5, 13, 7, 5, -4, -25, -35, -3, -2, 1, -29, 8, 6, -27, -28, 7, 11, -2, -10, 11, 9, -24, -49, 1, 7, -15, -16, -6, -12, -6, 25, 1, -1, -3, -1, -2, -5, -15, -51, -2, 14, -14, -14, -3, -21, 6, 23, 19, 13, -11, 3, 1, -5, 5, -61, -6, 12, -21, -1, -23, -8, 4, 19, -3, 26, -27, 2, -12, 1, -4, -26, -4, 25, -7, -8, -13, -3, 1, 8, -3, -41, -12, 23, -45, -9, 1, 6, -30, 6, -3, -26, -23, 5, -3, 7, -2, -23, 0, -12, 1, -8, -5, -46, -14, -4, -35, -19, 11, -6, -80, -52, -7, 14, 13, 8, 5, -7, -10, -26, -7, 10, -9, -30, 5, -9, -29, 1, 2, 2, 8, 8, 7, -6, -5, -31, 0, 3, -34, -21, 3, -6, -32, 19, 3, 3, 20, 0, 4, -4, 3, -60, 7, 7, -29, 1, -12, -8, 3, 21, 9, 14, -15, 14, -5, -14, 13, -64, 2, 7, 7, 5, -14, 4, 8, 8, -6, 27, -13, 5, -1, -8, 17, -24, 10, 2, 8, -6, -11, -5, -7, -4, -12, 29, -14, 12, -19, -19, 47, 5, -6, -35, 1, -30, -13, -1, 6, -12, -4, 15, 7, 9, 17, -7, -47, -20, -1, 11, -9, -13, 16, 1, -1, -26, 10, 8, 10, 11, 11, 1, -19, -19, -4, 10, -31, -19, 15, -26, -1, 19, -2, 5, 5, 12, 10, -9, -11, -29, 0, -3, -42, -17, 13, -7, 13, 16, -10, 4, 26, 7, 12, -22, 10, -42, 0, 12, -22, -2, -5, 4, 6, 10, -23, 15, 29, 7, -1, -21, 6, -40, -2, -2, 15, -1, -17, 11, -4, 5, -9, 14, 13, -2, -14, -17, 8, -10, 3, -4, 6, -11, -12, -6, -10, -5, -11, 26, -10, -14, -35, -26, -15, 1, 1, -3, 8, 16, -6, 6, 4, -11, -1, 30, 20, 11, 7, -6, -35, -19, -22, -7, -31, -28, 15, 3, -39, -6, 4, 2, 6, 11, 21, -19, -31, -21, -11, -15, -19, -12, 8, -3, -30, -4, -7, 7, 9, 14, 12, -17, -5, -33, -3, 2, -15, -9, -8, 10, 13, 0, -20, 14, 13, 14, 5, -37, 9, -40, 2, 11, -8, -5, -18, 3, 9, 9, -33, 6, 5, 6, 11, -34, 10, -10, -12, -3, 11, 3, -34, 7, -6, 5, -10, 11, 15, -13, -2, -13, -14, -41, 7, -9, 28, -14, -22, 8, -1, -2, -21, -3, -8, -4, -30, -27, -21, 1, -39, -31, 13, -14, -14, 25, 4, -1, 5, 1, -3, 2, -3, -2, -13, -8, -14, -2, -12, -4, 11, -16, -44, 10, 5, 3, 15, 13, 16, 43, -21, -38, -1, -60, -10, -9, -12, 6, 2, -8, -39, 16, 21, 13, 7, -14, -3, -39, 9, -11, -19, 2, -34, 4, -15, 2, -46, 19, 9, 10, 13, -49, 2, -24, 9, -11, -32, -7, -57, 41, -25, 1, -50, 19, -12, 11, 23, -62, 3, -14, 8, -25, -22, 7, -71, 6, -30, -3, -24, 14, -2, 10, 2, -43, 1, -19, -20, 0, -2, 2, -29, 22, 13, -6, -40, -7, -3, -38, -22, -62, 0, 3, -50, 8, -1, -17, -12, -20, -20, -5, -31, 
  -23, -15, -19, -24, -8, 5, 11, -1, -19, 19, 14, -30, 15, 10, 0, -12, -15, -10, 17, -22, 21, 4, 24, 13, -12, 11, 14, -20, -12, 10, 34, -27, -11, 0, 39, -25, 16, 15, 19, 21, -1, 27, 12, 3, -3, 14, -8, 5, -16, 9, -13, -34, -9, 2, 12, 10, -12, 26, 4, -39, -6, -1, -46, -17, -13, 0, 14, 18, -11, 6, 24, 12, -6, 8, 12, -2, -3, 0, -53, 4, -2, -4, 33, -17, -11, 6, 3, 12, -18, -8, 6, 10, -23, -8, -35, 4, 20, 2, 29, -7, 8, 2, -10, 10, -22, -1, -12, -4, -28, -14, -29, -4, -12, -27, -17, -46, 10, 14, 14, 13, -10, 31, 9, -11, -5, 22, -9, -25, -43, -8, 17, -49, 25, 26, 13, 10, -14, 30, 9, 19, -7, -1, 7, -10, -32, -23, -6, -33, 17, 15, 6, 15, 0, 29, 17, 4, -9, -6, -9, 1, -27, -28, -2, -23, -8, 9, 3, 11, 4, 22, 13, -8, -7, 6, -18, 10, -30, 1, 17, -20, -4, 13, -5, 14, -2, 3, 12, 7, -6, 2, -37, 11, -30, 3, 16, -22, -5, -1, 5, 7, 5, 7, 5, 0, -15, -5, -32, 11, -25, 4, 9, -5, -2, 33, -11, -8, 11, 4, 6, -3, -4, 12, -8, -6, -9, -33, -3, -21, -5, 23, 8, 32, -23, 31, 4, -1, -12, 11, 9, -13, -30, -43, -22, -49, 16, 13, 12, 20, -8, 25, 2, 12, -15, -1, 0, -4, -10, -46, -22, -48, -9, 24, 9, 4, -7, 25, 11, -4, 2, 3, 8, 10, -14, -17, -1, -33, -15, 7, 10, 2, -20, 12, 11, 1, 14, 4, 2, -2, -39, 0, 5, -4, 1, 11, 7, 4, -2, 4, 8, 14, 0, -1, -30, 6, -49, 1, -10, -4, -2, 12, 6, -2, 6, -3, 11, 6, -17, -2, 0, 0, -37, 16, -24, 5, -6, -6, -8, -10, -22, 1, 0, 6, -9, 11, -16, -5, -9, -37, 0, -16, -12, 1, 12, 6, 5, 9, 0, -16, 2, 20, 0, -23, -30, -40, -26, -30, 5, 14, 13, 5, -16, 15, 13, 0, -1, -3, -25, 0, -52, -29, -30, -49, 21, 9, 12, 5, 4, 18, 4, 3, -15, -8, -27, 16, -3, -26, -30, -13, -26, -5, 8, 8, 4, 9, -10, 12, -4, -5, -27, 1, -19, -5, -22, -3, 1, -4, -1, 11, 6, -15, 16, 10, -5, 11, 3, 11, -49, 5, -47, -1, -11, -7, -13, -4, 8, -19, -8, 8, -3, 14, 6, 7, -10, 13, -42, -6, 12, -10, -17, 10, 2, 13, -41, 4, -19, -15, -5, 5, -41, -29, -10, -37, -16, -9, 6, -10, 4, 8, 3, -18, 19, -57, -17, -2, -18, -26, -21, -63, 9, -9, 10, 2, 10, 14, 0, 0, 6, -32, -30, 24, -16, -20, -33, -37, 18, -19, 4, -19, 0, 3, 5, 1, 11, -34, -7, 10, -30, -34, -35, -8, 2, -43, 4, -14, -2, 4, 4, 14, -12, -12, -10, 9, -23, -30, -29, 11, 11, -12, -2, 3, -5, -13, -6, 11, -30, -10, 1, 5, -46, -9, -3, 16, 5, 1, -16, -1, 6, 6, -30, 5, -9, 9, 9, 11, 13, -12, -13, 3, 17, -1, -2, 13, -40, -22, -5, 0, -34, 0, 1, 17, -29, -8, -51, -16, -16, 4, 11, -4, 15, -11, 1, -2, -39, -28, 10, 7, -28, -4, -82, -40, -6, -10, 10, -14, 19, -6, 16, -6, -30, -42, 13, 13, -21, -35, -63, -14, -15, -28, 1, -34, 3, -9, 3, 9, -32, -42, 2, 18, -59, -14, -36, -3, 35, -35, 14, -12, 4, 33, 0, 11, -16, -20, -15, 9, -9, 4, -4, 4, 18, -9, -9, 2, -5, -19, -18, 12, -15, -6, -14, 9, -23, 14, 6, 9, 17, -18, -18, 2, 27, -51, -58, 10, -14, 10, -9, 15, 6, -17, 15, 17, 21, 8, -6, 9, -27, -32, -26, 3, -5, 8, 4, -7, -26, -24, -32, -32, -18, 17, 10, -48, 8, -3, 11, -11, -28, -39, 1, 0, -9, 5, -49, 4, -20, 1, 24, -25, 27, -19, 21, -13, -46, -45, 10, 34, -44, -22, -55, -4, -4, -28, 12, -57, 25, -2, 4, 13, -77, -59, -12, 21, -28, 17, -26, -12, 23, -16, 9, -22, 14, 7, -3, 34, -56, -47, -16, 28, -23, 7, -9, -25, 23, -14, -10, -58, 25, 25, -24, 35, 8, -28, -21, 12, -52, -10, -5, -6, 22, -14, -31, -46, 5, 20, -21, 7, -34, -56, -19, 13, -32, -24, -24, 7, 23, 5, -9, -8, -2, -17, -11, 15, -51, -61, -21, -2, 
  -14, 13, 20, 5, -7, -20, -14, -21, 3, -21, -33, 20, 1, -18, -20, 9, 30, 5, 1, 22, -43, -9, -32, -15, -1, -27, -7, -9, -5, 3, 0, -26, 15, -14, -32, 3, -13, 0, -16, -1, 0, -13, -7, 1, -1, 4, -4, -37, 5, 2, -5, 15, -5, 1, -12, -1, -5, -7, 8, -41, -1, 8, -5, -23, 37, 3, -14, 12, -13, -1, -17, 0, 0, 5, 6, -25, 23, 0, -15, -21, 8, 10, 5, -41, -14, -5, -55, 6, -10, -6, -9, -1, 1, -5, -19, 4, -16, -16, -44, -16, -16, -3, 0, -14, -51, 3, -26, 3, -21, -22, -21, -18, 20, 4, 20, 35, -5, -25, -3, -13, 2, -10, 1, 6, 8, -7, -10, 1, 25, 2, 22, 4, -46, -8, -13, -14, 5, -43, -15, -5, 16, -3, -38, -29, 16, 0, 30, 7, -25, 5, -16, -3, 0, -22, 3, 11, 18, -4, 10, -26, 21, 6, 9, 12, -13, 3, -10, -1, -9, -18, 4, -10, 16, 5, 15, -18, 9, 2, -2, 9, -14, 3, -14, -2, -6, 0, 3, -15, 17, 4, 1, -1, 16, 16, -11, 6, -18, -7, -1, 4, -5, -8, 9, -7, 16, 4, -4, -8, 0, 18, 1, -17, -16, 3, -6, -2, -3, 2, -31, -8, 29, 3, -7, -12, -7, 5, 13, -13, -17, -27, -10, -20, -11, -10, 7, 3, 29, -40, -49, -12, -1, 14, 26, 0, -13, -22, -4, -8, -8, -17, -13, 7, 14, -22, -78, -4, 13, 17, 21, 6, -1, -10, 4, -18, -1, -12, -7, 10, 10, -2, -2, -12, 12, 8, 4, 4, -6, 3, -10, 3, -5, -13, -7, -9, 8, 8, 2, -4, 11, -2, 2, 6, -18, 0, -24, 4, -1, -7, -7, -13, 12, 0, -3, 5, 6, 3, 13, 0, -9, -13, -73, -6, -7, -11, 12, -9, 16, -9, -9, -5, 18, -2, -22, 0, 5, -46, -11, -6, -3, -2, 11, -8, 15, -2, -5, -12, 8, 14, 11, 6, -3, 27, -9, -8, -7, -18, 3, 3, -5, -50, -40, -22, 0, 8, 19, 6, 9, 2, -3, -6, -5, -28, -8, -1, 27, 4, -13, -17, 9, -3, 13, -4, -14, -16, -7, 6, -9, -20, -17, 2, 21, -3, -7, -16, 7, 2, 9, 5, -20, -26, -15, -1, -8, -43, -26, -35, 4, -4, -6, -11, 17, 0, 4, 20, 4, -18, -24, 0, -5, -32, -10, -10, 13, 13, 8, -14, 13, -13, 8, 4, -3, -19, -20, -14, 2, -2, -2, -17, 19, -7, -2, -13, 13, -1, -6, 7, -12, -71, -4, -37, 13, 0, 41, -9, 4, -10, 10, -8, 16, 4, 14, 1, -5, -38, -2, -31, 15, -26, 2, 1, 23, -52, -27, -1, 13, 11, 1, 14, -59, -37, 4, -27, 9, -26, -12, 0, 17, -1, 15, -4, 4, 6, 1, 12, -7, -24, 1, -34, -4, -48, -6, 6, 16, -7, -5, -4, 3, 3, 1, 12, -8, -5, -4, -15, -30, -48, -4, 2, 18, 3, 2, -16, 14, 16, -3, 3, -3, -16, -1, -17, -27, -11, -3, 7, 18, -12, -1, -20, 21, 3, 6, 9, -10, -21, -50, -17, -23, 6, 1, -6, 14, -13, -9, -19, 8, 1, -24, -34, -21, -11, 1, -2, -47, 9, 20, -2, 4, 2, 7, -29, 10, 8, 11, 27, -5, -30, -5, -30, 11, -7, -11, -2, 1, -8, -20, 15, 8, -3, 2, 8, -1, -4, -1, -23, -8, -21, -3, 9, 4, -4, -15, -1, 14, 8, 6, 12, -5, 1, -8, -4, -15, -9, -5, 5, 13, 6, 3, -4, 13, 18, 9, 4, -16, 7, 4, -4, -13, -37, -4, 3, 10, -2, 6, -16, 14, 16, 6, -1, -18, 3, -4, -22, -28, -26, 5, -12, 34, -16, 2, -11, 12, 13, -6, 2, -29, -18, -18, -54, -1, -7, 21, 0, 31, -32, -9, -17, 10, 3, -16, -11, -32, -40, -6, 13, -18, 4, 3, -6, 16, -49, -5, -37, 10, -8, 7, 20, -8, -10, -19, -13, -2, 8, 3, -20, 17, -7, -9, -1, 3, 14, 9, 9, -4, -10, -17, -14, -17, -2, -11, 0, 2, -10, -13, 6, 16, 1, 14, 13, 4, -1, -9, 2, -19, -19, -2, -8, 18, 0, 0, -13, 14, 5, 6, 9, -24, -1, -7, 6, -29, -2, -1, -18, 17, 2, 4, -18, 21, 11, 9, -2, -15, 3, -18, 10, -52, -32, 10, -7, 34, 10, 1, -26, 13, 23, -8, -8, -18, 0, 3, -14, 6, -29, 5, -27, -7, -2, -1, -21, 4, -5, -20, 23, -7, -31, 0, 11, 4, -2, -7, -20, -2, -8, 15, -5, 
  -3, 25, 26, 28, -3, -26, -52, 6, 6, -40, -18, 15, -6, -56, -2, 9, -28, -19, -63, 10, -60, -11, -61, 7, -2, -18, -5, 4, 4, -7, -4, -8, 11, -1, 9, 4, -42, 6, -30, 0, 9, -35, 3, -6, 1, 8, -21, -34, 21, 6, -9, 14, -28, 0, -71, 7, 4, -18, 9, -20, 22, 2, -11, -17, 0, -9, -14, -50, -12, 6, -59, 7, -25, 3, 5, -20, 10, 5, -31, -23, 13, -1, 13, -14, -15, -2, -25, 1, -47, 10, 23, -3, 26, 6, -8, -23, -17, 22, -22, 10, 13, -29, 5, 19, -9, 15, -31, 15, 37, -22, -27, 2, -30, 12, 17, 14, -14, -35, -19, -20, 1, -17, -17, -1, -21, -46, -35, 12, 32, 6, 4, 22, -67, -14, -22, -4, 0, -56, 2, 1, 13, 18, -10, -6, 10, -11, 14, 9, -33, 1, -4, -1, 2, -32, 0, -6, 14, -2, -33, -6, 3, 9, 3, 6, -14, 4, -13, 5, -5, -14, 6, -1, 4, 1, -24, -10, 8, 2, 9, -5, -8, 8, -3, 9, -20, -3, 1, -13, 8, 1, -5, -12, 8, -2, 5, 1, -7, 3, -58, 1, -31, 1, -22, -3, 9, -6, -17, -13, -14, 9, 4, 14, 3, -27, 8, -1, -55, -6, 23, 12, -3, -30, -17, -5, -10, 15, 0, 6, 9, -32, -24, -23, -1, -13, -18, 8, -9, 18, -14, 10, 17, 0, 12, 19, -42, 5, -21, -25, 0, -20, 5, 2, 9, -5, -16, -5, 11, 13, 17, 8, -27, 4, -6, -11, 6, -25, -4, 7, 4, -8, -10, 5, 13, 7, 11, 3, -15, 5, -1, 3, -6, -17, 3, -1, 5, 3, -37, -15, 1, 4, 0, -2, -9, 5, -3, 0, -18, -3, 13, 0, 1, -5, -13, -10, 4, 6, -6, 0, -8, -2, -92, -5, -26, 0, 1, 4, 8, -23, -12, -4, -36, 0, -31, 18, -7, -28, 0, -5, -43, 2, 20, 11, -15, -16, -13, -11, 51, 20, -3, -2, -1, -15, -20, -2, 0, 11, -20, 0, 9, -5, -35, 10, -7, 0, 8, 2, -29, -32, -25, -2, -13, -24, -3, -4, 1, -5, -44, -13, 10, 11, 12, 12, -19, -7, -1, 14, -28, 0, -4, -5, 11, 14, -12, 10, 4, -7, 0, -6, -17, -6, 3, 2, -7, -11, 9, -4, 0, -9, -18, 4, -8, -5, 4, 6, -3, -15, -4, -10, -10, -5, -6, 8, 5, -22, -24, 1, -10, 2, -16, 1, -13, -14, -35, -12, -55, -12, 10, 14, 6, -11, -11, 1, -13, -7, -15, 35, -21, -54, 2, 12, -59, -3, -68, 10, 0, -24, -12, -15, 4, 13, 7, 17, 10, 4, 5, -25, 3, -5, -16, -12, -21, -5, -5, 9, 5, -3, 1, 11, 8, -7, -2, 3, 2, 6, -5, -9, 6, -15, -26, -2, 6, 5, 5, -12, -1, -10, -3, 5, -1, 19, 5, -8, -6, -2, -15, 9, -3, -6, -10, -6, -6, -4, 4, -16, -1, 18, 6, 14, -17, -9, -2, 13, 9, -11, 1, 7, 16, -26, 1, -7, -11, -32, 3, 10, -4, -13, -17, 2, -16, -5, 6, 6, 17, -24, -4, -2, -36, -32, 7, 9, 0, -7, -5, 10, 1, 5, 4, 49, 10, 33, 6, 9, 11, -28, -64, -1, 13, -13, -6, 12, -21, -27, 9, 6, 4, -1, -7, -1, 7, 8, 1, -13, 15, -7, -39, 9, -5, -19, -5, -30, 9, -3, 9, -3, 12, 30, 3, -9, -5, -28, -10, 12, -7, -18, -5, -30, -4, -4, 1, 1, 1, 19, 1, 6, 0, -24, -12, 17, -8, -14, -9, -16, 22, -16, 1, -12, -9, 22, -10, 8, -7, -10, -13, 12, 2, 11, 4, -3, 8, -13, -4, 0, -16, -8, 0, 13, 2, -16, -8, 9, -17, -6, 16, 11, 14, -10, 6, 10, -19, -13, 0, 8, -24, -19, -5, 8, 9, -2, 28, 25, 17, 11, 5, -10, -30, -9, -15, -2, 21, -3, 1, 10, -45, 1, -43, -39, -2, 3, -34, -25, 6, -13, -9, 19, -44, -43, 8, 4, -17, -29, -10, -19, -20, -12, 8, 1, 33, 8, -17, 14, -26, -27, -12, 31, -32, -15, -7, -20, -7, -14, 9, -25, 1, 19, -9, 20, -22, -20, -19, 18, -27, -4, -7, 5, 25, -13, -1, -14, -2, 2, -13, 26, -41, -16, -6, 22, -31, 20, -15, -6, 26, -6, -6, -15, 8, 22, -13, 30, -35, -27, -12, 20, -15, 22, -11, 4, 15, -15, -5, 9, -10, 12, -10, 14, -13, -26, -11, 18, 10, 8, 8, 38, 13, -14, 3, 6, 5, 7, -6, 5, 22, -15, -20, 19, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 10,784 } };
const TfArray<1, float> quant6_scale = { 1, { 0.013637468218803406, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[10] = { 1002, 1942, -703, -575, -311, -1031, 48, -444, -68, 447, };
const TfArray<1, int> tensor_dimension7 = { 1, { 10 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0004559388617053628, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,28,28,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0069728200323879719, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,14,14,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0069728200323879719, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,14,14,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.033432807773351669, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.033432807773351669, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,784 } };
const TfArray<1, float> quant12_scale = { 1, { 0.033432807773351669, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,10 } };
const TfArray<1, float> quant13_scale = { 1, { 0.46323487162590027, } };
const TfArray<1, int> quant13_zero = { 1, { 81 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,10 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,4,5 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension0, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 7840, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension9, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension11, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension13, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
