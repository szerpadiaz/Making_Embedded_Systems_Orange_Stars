/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.05.2022 11:08:56

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 33280;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteEvalTensor tflEvalTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,28,28,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 784, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data2[32*3*3*1] = { 
  /* [0][0][][] */ -65, 64, 96, 
  /* [0][1][][] */ -54, -127, -98, 
  /* [0][2][][] */ 93, 8, -37, 
  /* [1][0][][] */ 65, 38, -114, 
  /* [1][1][][] */ 103, 17, -127, 
  /* [1][2][][] */ 74, -67, -78, 
  /* [2][0][][] */ -4, -78, -21, 
  /* [2][1][][] */ 127, 80, -101, 
  /* [2][2][][] */ -112, -113, 127, 
  /* [3][0][][] */ -127, 97, 30, 
  /* [3][1][][] */ -62, -51, 22, 
  /* [3][2][][] */ 67, -75, -17, 
  /* [4][0][][] */ -22, 108, -127, 
  /* [4][1][][] */ 10, 64, 27, 
  /* [4][2][][] */ 53, 127, 82, 
  /* [5][0][][] */ 71, 44, -12, 
  /* [5][1][][] */ 95, 84, -55, 
  /* [5][2][][] */ 33, -19, -127, 
  /* [6][0][][] */ -80, -108, -127, 
  /* [6][1][][] */ 64, 59, -30, 
  /* [6][2][][] */ 49, 96, 44, 
  /* [7][0][][] */ -20, 54, -27, 
  /* [7][1][][] */ 72, -6, 105, 
  /* [7][2][][] */ 127, 127, 97, 
  /* [8][0][][] */ 83, -76, -103, 
  /* [8][1][][] */ 127, -23, -42, 
  /* [8][2][][] */ 123, -55, -58, 
  /* [9][0][][] */ -120, -112, -30, 
  /* [9][1][][] */ 47, 23, 41, 
  /* [9][2][][] */ 84, 127, 45, 
  /* [10][0][][] */ -127, -123, -76, 
  /* [10][1][][] */ 38, -9, 18, 
  /* [10][2][][] */ -57, -32, -108, 
  /* [11][0][][] */ 126, -40, 68, 
  /* [11][1][][] */ 127, 53, 91, 
  /* [11][2][][] */ 50, 74, -78, 
  /* [12][0][][] */ 70, -127, -3, 
  /* [12][1][][] */ 90, -98, -22, 
  /* [12][2][][] */ 91, -77, -64, 
  /* [13][0][][] */ -11, -63, -127, 
  /* [13][1][][] */ 28, 80, 6, 
  /* [13][2][][] */ 21, 65, 8, 
  /* [14][0][][] */ -127, 4, 106, 
  /* [14][1][][] */ -115, 25, 67, 
  /* [14][2][][] */ -125, -43, 80, 
  /* [15][0][][] */ -117, -127, -18, 
  /* [15][1][][] */ 82, 13, -18, 
  /* [15][2][][] */ 71, 82, 12, 
  /* [16][0][][] */ -127, 45, 54, 
  /* [16][1][][] */ -112, 24, 62, 
  /* [16][2][][] */ -104, -43, 91, 
  /* [17][0][][] */ -96, 1, 29, 
  /* [17][1][][] */ -68, 54, -127, 
  /* [17][2][][] */ -16, -62, -119, 
  /* [18][0][][] */ -90, -127, 0, 
  /* [18][1][][] */ -46, -30, -36, 
  /* [18][2][][] */ 10, -98, -36, 
  /* [19][0][][] */ -20, -49, 29, 
  /* [19][1][][] */ 45, -127, 82, 
  /* [19][2][][] */ -9, -34, -15, 
  /* [20][0][][] */ -36, 44, 80, 
  /* [20][1][][] */ -29, -53, 43, 
  /* [20][2][][] */ 30, -48, -127, 
  /* [21][0][][] */ 15, -66, -73, 
  /* [21][1][][] */ -117, -76, 45, 
  /* [21][2][][] */ 103, 127, 40, 
  /* [22][0][][] */ -46, 109, 24, 
  /* [22][1][][] */ 55, 34, 17, 
  /* [22][2][][] */ -82, -127, -35, 
  /* [23][0][][] */ -6, -35, -67, 
  /* [23][1][][] */ 30, 127, 124, 
  /* [23][2][][] */ -47, -80, -49, 
  /* [24][0][][] */ 35, 79, 49, 
  /* [24][1][][] */ -127, -80, -9, 
  /* [24][2][][] */ 29, -26, 1, 
  /* [25][0][][] */ 48, -44, -125, 
  /* [25][1][][] */ 109, 49, -127, 
  /* [25][2][][] */ 83, -14, -91, 
  /* [26][0][][] */ -13, 55, 118, 
  /* [26][1][][] */ -119, 84, 101, 
  /* [26][2][][] */ -127, 23, 71, 
  /* [27][0][][] */ 123, 117, 38, 
  /* [27][1][][] */ -119, -127, -113, 
  /* [27][2][][] */ -17, 16, 12, 
  /* [28][0][][] */ 89, 99, 127, 
  /* [28][1][][] */ -68, -30, -51, 
  /* [28][2][][] */ -48, -90, -93, 
  /* [29][0][][] */ -26, -117, -54, 
  /* [29][1][][] */ 51, 94, -3, 
  /* [29][2][][] */ -18, 86, 127, 
  /* [30][0][][] */ -122, 30, 97, 
  /* [30][1][][] */ -68, -48, 127, 
  /* [30][2][][] */ -74, -68, 124, 
  /* [31][0][][] */ 102, 74, 0, 
  /* [31][1][][] */ 34, -61, 85, 
  /* [31][2][][] */ -127, -84, -98, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 32,3,3,1 } };
const TfArray<32, float> quant2_scale = { 32, { 0.002284070011228323, 0.0028276268858462572, 0.0012914513936266303, 0.0022978093475103378, 0.0013153875479474664, 0.0028090351261198521, 0.0029169972985982895, 0.0015234182355925441, 0.0023036065977066755, 0.0017572250217199326, 0.00092212931485846639, 0.0014975357335060835, 0.0026905639097094536, 0.0027719591744244099, 0.0027150665409862995, 0.002808466786518693, 0.0027720616199076176, 0.00065739237470552325, 0.0010510477004572749, 0.002484810771420598, 0.0024895910173654556, 0.0015932454261928797, 0.0021383303683251143, 0.0018783420091494918, 0.0023611909709870815, 0.0028656746726483107, 0.0024231290444731712, 0.0019978552591055632, 0.002172442153096199, 0.0015035290271043777, 0.0020452553872019053, 0.0019831077661365271, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[32] = { 19462, 9731, 22776, 17776, -1764, -226, 9869, -5742, 11640, -2358, -1704, -7619, 17035, 6145, 20292, 6520, 21452, -5366, 0, 14138, 16220, 2968, 13257, 14454, 13112, 14709, 1844, 17873, 16689, 242, 9416, 19043, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 8.957137652032543e-06, 1.108873311750358e-05, 5.0645157898543403e-06, 9.0110179371549748e-06, 5.1583829190349206e-06, 1.1015824384230655e-05, 1.1439205991337076e-05, 5.9741896620835178e-06, 9.0337516667204909e-06, 6.8910790105292108e-06, 3.616193680500146e-06, 5.8726895986183081e-06, 1.0551231753197499e-05, 1.0870428923226427e-05, 1.064732077793451e-05, 1.1013596122211311e-05, 1.0870830919884611e-05, 2.5780095711525064e-06, 4.1217558646167163e-06, 9.7443562481203116e-06, 9.7631027529132552e-06, 6.2480216911353637e-06, 8.3856093624490313e-06, 7.3660476118675433e-06, 9.2595728347077966e-06, 1.1237940270802937e-05, 9.5024670372367837e-06, 7.8347266025957651e-06, 8.5193814811646007e-06, 5.8961927607015241e-06, 8.020610039238818e-06, 7.7768936534994282e-06, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[16*3*3*32] = { 
  /* [0][0][][] */ 27,-37,33,38,-16,-24,27,-13,24,-2,-22,-3,-4,-17,24,-2,27,-16,21,22,82,41,83,88,42,-28,-20,71,60,-11,-27,79, 40,-50,76,17,-15,-6,-16,-24,-71,10,-24,14,-39,-2,-2,16,3,0,-23,13,93,-11,92,127,27,-64,-10,57,86,-12,-38,64, -27,-43,38,9,-8,18,7,31,-56,19,20,27,-56,-3,-19,29,-3,-18,7,-2,57,22,66,103,26,-90,20,17,55,-4,-27,93, 
  /* [0][1][][] */ 86,-47,26,35,9,-19,45,-30,-34,-1,-21,-20,-60,4,-15,47,-20,24,-12,-21,61,48,34,27,30,-15,-24,86,49,27,-19,-23, 95,-57,76,1,-2,-18,67,0,-25,27,-5,-29,-75,25,-28,54,-20,-15,-5,-9,38,46,35,26,20,-14,-46,64,34,-2,-42,27, 116,-35,15,59,6,1,30,-30,-47,22,21,10,-25,-4,-9,60,-25,4,14,10,58,15,49,38,79,-17,13,103,56,2,-2,60, 
  /* [0][2][][] */ 41,-48,25,-19,-26,12,40,17,-64,-6,26,-14,-60,4,-28,33,-5,-2,15,-16,56,18,53,55,4,-47,-8,82,80,7,-53,12, 24,-68,24,-4,0,-10,52,22,-61,-4,23,28,-59,1,-34,50,-17,-8,20,-11,52,23,40,78,31,-55,-17,66,39,-12,-47,29, -21,-18,95,-33,1,16,37,26,4,16,17,24,-23,49,-45,57,-46,-7,10,3,10,35,-7,58,-24,-40,13,-26,-26,2,-24,10, 
  /* [1][0][][] */ 6,127,-23,-27,4,29,4,12,23,-24,-13,13,64,19,-6,-27,14,28,9,59,30,-27,-15,-58,36,64,-3,80,58,-2,8,50, -9,90,74,-21,-3,4,-50,-32,41,-27,33,-9,77,-19,89,-6,94,-1,21,79,-51,-15,-43,-73,-13,60,-16,36,-9,-52,25,45, -15,3,-3,52,14,-35,-13,-8,-8,16,14,-20,54,-3,119,-38,125,38,-28,29,48,-20,48,56,20,-27,41,-38,-48,-26,54,0, 
  /* [1][1][][] */ -79,71,36,-37,8,0,-3,-33,38,-6,3,-24,84,31,53,-42,26,-8,-8,54,-68,2,4,-12,-15,48,30,-2,-37,-8,15,-19, -22,35,24,13,11,-36,28,-5,20,-18,19,-27,95,31,74,0,67,-25,-32,72,1,-42,-24,12,-12,5,-5,-63,-36,-41,55,16, 36,-57,5,38,-21,-46,-7,9,3,-28,-1,-16,91,-36,109,-7,121,-12,12,40,37,-19,39,38,-7,-25,33,-17,38,13,108,-1, 
  /* [1][2][][] */ -7,-13,-17,14,24,-49,0,7,-33,-5,-27,25,-12,-39,20,-41,64,2,-9,-9,12,-7,12,-28,-1,-49,-5,-3,-61,16,57,13, 56,0,30,41,27,-30,56,21,-3,15,-23,-17,65,50,-10,-4,-51,-21,0,17,13,-28,-24,35,12,47,-12,-38,-52,24,-56,-34, 35,-77,11,2,14,-56,11,14,17,14,4,-17,41,9,63,-18,88,7,-31,45,4,-19,-20,23,56,-1,38,-67,10,38,77,19, 
  /* [2][0][][] */ 24,112,43,-28,-1,55,-24,-29,76,-21,-6,30,106,-9,-48,-3,-30,-16,-11,-8,19,-24,-9,-14,4,104,12,35,38,5,-13,-2, 27,-29,-19,-11,3,-31,-9,-9,-2,-14,17,8,-1,17,13,10,37,13,20,-4,4,23,-3,-10,25,-33,-4,38,7,23,14,-11, 43,-34,-10,5,-22,-41,16,16,-28,-18,-16,-7,-1,10,-38,15,2,11,-1,9,-7,19,-32,-30,33,-44,15,41,1,20,23,-33, 
  /* [2][1][][] */ -33,85,46,-6,5,29,0,-28,99,-23,-25,-10,127,55,36,-29,72,-13,-25,67,-9,-22,-27,13,11,90,10,11,-14,8,45,15, -1,-10,-35,56,14,-17,-46,-10,-28,1,-16,-5,-9,-17,49,-42,56,-5,-21,-2,31,-45,-17,-32,-28,-44,1,-96,-63,-17,46,-11, -23,-26,10,12,11,7,-46,-11,13,-4,-20,-24,12,-65,-25,8,-23,-4,8,19,7,-19,-3,-16,-6,-19,-14,-64,-52,3,-23,-13, 
  /* [2][2][][] */ 1,77,34,7,-4,36,36,-22,91,-17,-11,0,101,34,35,-9,52,23,22,52,41,-28,-30,-13,19,105,18,-28,-14,22,13,-36, -4,-4,-38,-7,-1,-27,-19,12,0,17,7,19,75,-13,5,2,24,15,13,32,-12,7,3,-30,10,-12,17,-1,-13,-4,28,-26, -19,-8,-44,3,-5,4,-6,21,11,-10,19,-9,13,-16,5,-24,-5,15,-11,-19,-46,-7,-32,-24,-19,-19,-9,-20,-38,9,-6,-48, 
  /* [3][0][][] */ -77,96,-1,-30,-7,52,-18,21,56,-19,6,27,105,29,-4,-26,-44,-25,14,18,-81,-5,-37,-63,-43,75,-26,-18,-50,-31,-21,2, -35,24,20,17,-19,-13,-76,-5,-9,-20,-10,3,55,-67,53,-52,33,-22,16,47,7,-2,7,-37,-38,-5,24,-56,-36,-30,59,-19, -13,6,0,-19,-10,21,-24,15,-13,-35,-24,24,3,-57,7,-51,-14,-24,27,47,64,3,51,-20,-15,-26,3,20,69,-33,-13,72, 
  /* [3][1][][] */ -23,9,33,-14,-21,20,32,-17,5,10,-16,-3,29,12,-3,-31,-5,-4,13,9,-3,12,5,-25,-21,-17,-35,33,-7,18,-38,15, 70,28,-7,23,-28,-36,21,-22,27,-6,0,2,86,8,-6,-2,51,8,-20,1,83,22,30,43,47,-34,-40,40,46,-25,7,4, 88,-31,55,19,-30,-36,20,-15,-64,-19,-25,-11,-18,24,30,8,10,-18,26,-1,43,9,79,63,75,-49,12,80,73,-28,-21,50, 
  /* [3][2][][] */ 5,-19,-33,11,29,-45,112,0,26,20,21,-19,3,83,46,75,26,28,1,-28,-18,1,-56,20,-7,-3,34,-26,-53,44,-1,-84, -26,-65,-8,-15,2,-10,125,39,26,40,-9,-9,-21,119,-27,76,-3,-15,27,-65,-80,49,-25,89,18,6,-20,-70,-41,33,-18,-53, 46,-35,-12,6,14,17,127,7,23,47,-20,6,-55,102,-123,100,-109,-29,-22,-7,-37,-12,-76,41,-9,30,-27,-35,-83,24,-74,-80, 
  /* [4][0][][] */ 56,-3,27,0,9,-22,1,12,-43,-2,5,-17,-46,-37,-19,33,-3,-26,23,4,2,35,-9,12,17,14,-45,67,34,-9,-53,-1, 23,13,4,-52,12,8,-3,-10,-18,-30,-9,7,-17,9,-34,-1,-33,-13,4,-1,-32,-11,-71,-47,11,44,-42,62,15,-23,-32,34, -18,48,35,10,12,-10,-69,-27,24,-17,-19,-20,92,-43,85,-46,85,5,18,28,31,-27,22,21,-14,-4,51,5,9,-25,53,37, 
  /* [4][1][][] */ -61,-39,-4,-29,-22,-13,-2,13,-18,27,14,8,-43,10,-55,-12,-35,17,22,-41,-77,1,-60,-32,22,-46,-13,14,-28,13,-27,-66, 17,59,-37,-15,-21,18,55,-18,22,-1,12,-25,36,22,-77,38,-76,23,-12,35,-17,-9,-72,-36,-21,46,-36,3,-66,17,7,-44, 93,6,34,60,-26,-41,10,-32,78,-30,13,16,127,-33,110,-33,90,-16,26,67,56,-65,23,39,19,8,34,-19,48,-15,65,-3, 
  /* [4][2][][] */ -75,-28,-89,-46,10,-8,-39,-5,-52,-10,12,24,-33,-5,-5,-32,6,1,-25,-21,-60,23,-24,-30,-39,-65,28,-92,-24,-25,18,-26, -69,35,-1,-33,25,40,40,19,49,17,-5,11,59,23,-40,-7,-51,21,-25,-63,-69,-40,-6,19,-37,13,-16,-19,-41,17,-6,3, 65,11,43,35,11,-21,72,23,89,-7,13,-13,87,36,72,22,75,18,-6,56,6,11,-34,-6,47,61,-1,-97,-24,18,40,-4, 
  /* [5][0][][] */ 53,80,-1,23,16,54,-13,20,56,-34,-22,18,120,25,-36,-38,-17,4,11,45,29,-21,-35,-41,-36,127,-3,17,-33,-42,-3,14, -35,-31,3,-15,3,-35,-48,-29,-42,12,0,-6,-4,-11,64,-29,23,-27,3,37,-42,14,-32,-13,7,-28,14,-14,-8,21,48,10, -6,-29,-15,35,4,7,15,1,-24,-7,5,-11,-20,-35,-58,-4,-44,16,-19,28,1,-18,-30,-25,-12,-24,-6,-12,-29,20,-17,-59, 
  /* [5][1][][] */ -18,48,43,-56,21,40,15,12,76,-23,22,-7,104,29,-10,-9,-9,27,-3,44,-77,14,-55,-33,-45,96,-27,-9,-44,-26,-23,-19, 39,-60,-39,71,11,-33,-36,-3,-31,-5,-15,-14,4,-29,56,-32,17,14,-20,61,40,-31,12,-18,22,-15,9,-73,6,-28,40,-32, -77,-47,20,-35,-18,-32,-41,8,-49,3,-22,19,-48,-50,-11,-28,-11,-15,-15,17,-37,3,-11,-55,8,-23,-1,-40,0,-19,14,-31, 
  /* [5][2][][] */ -46,0,4,-33,29,7,20,6,38,-8,15,30,44,23,10,-3,29,-6,-24,3,-27,3,-8,24,-47,44,3,1,-34,29,32,15, -3,3,20,-6,-18,13,10,0,56,-14,7,18,66,5,10,42,26,-1,23,26,11,6,-16,-29,-42,65,14,-47,-5,-17,26,-28, -11,-44,-28,40,21,-16,-52,7,-12,-2,15,-25,-4,-52,40,-39,48,-12,4,45,18,4,-15,0,22,-25,13,-45,-27,2,55,-8, 
  /* [6][0][][] */ 72,84,62,25,6,44,-14,16,58,-14,12,-25,80,51,-7,-50,-15,28,-1,19,58,-32,22,-14,30,72,-10,49,25,-8,3,37, 80,14,19,21,-2,-22,44,-36,-14,-8,-3,-12,45,36,46,-28,33,3,6,17,56,20,24,59,38,-3,-20,45,15,38,15,60, 74,-8,12,27,18,-3,36,26,-1,24,32,-24,49,16,49,46,21,-17,-22,-15,57,36,56,36,17,-37,36,32,61,-11,-11,20, 
  /* [6][1][][] */ 10,43,9,-16,17,16,94,-10,66,9,29,7,72,77,-35,13,-54,16,6,-23,-40,12,-52,-27,-33,20,-49,-31,-64,31,0,-16, 92,47,5,53,9,-33,58,10,68,-10,-29,-26,63,-11,58,20,11,-16,20,78,90,-53,9,14,20,10,13,-9,-22,-33,-4,-24, -14,-60,17,18,8,-24,-44,14,-32,-1,17,22,20,-2,74,-24,87,21,-13,49,-25,8,8,31,24,-27,46,-16,-7,-4,38,-12, 
  /* [6][2][][] */ 39,82,66,16,6,41,28,11,17,5,20,11,17,17,-92,-33,-96,24,22,-51,7,-20,36,-28,-14,42,-29,28,65,-41,-52,-2, -19,62,86,-23,6,-9,-30,-28,59,-15,-9,-26,60,-25,-3,-31,-7,-1,11,42,12,-35,15,21,-4,49,-24,78,15,-12,8,56, 5,-51,-44,-17,30,-24,18,10,-73,-17,29,-28,-60,-50,127,-21,102,36,27,-12,-2,-15,12,49,11,-100,7,-27,-14,-1,80,-35, 
  /* [7][0][][] */ -51,20,45,-28,-10,45,-35,10,21,-36,-15,16,41,-26,4,-86,-43,-22,-16,23,27,-6,40,69,-31,13,-21,8,40,5,-20,40, -22,-1,35,11,4,-2,-35,-6,-10,-34,-15,28,6,-34,-16,-57,-3,23,26,-3,44,-32,23,83,-55,-34,-13,17,7,-28,-46,32, 20,-15,78,-36,-7,3,-24,3,-28,-27,23,-14,-23,-23,-12,-29,-23,-3,-18,-11,40,-28,34,77,7,-43,-27,23,49,-20,-24,44, 
  /* [7][1][][] */ 88,-1,-17,11,11,-23,0,-13,-34,-8,-12,-26,-27,18,-3,7,-15,-14,-22,-52,60,40,5,30,83,-46,-13,98,53,22,-31,31, 106,-42,48,36,-3,-48,52,12,-52,-15,-12,-27,1,31,-29,23,-5,27,-7,-51,91,51,74,43,84,-43,-35,101,91,-23,-67,34, 127,-35,18,49,13,-44,-2,6,-22,21,-27,4,-36,-5,6,45,17,7,19,-19,114,55,44,35,107,-26,-17,119,107,-14,-28,64, 
  /* [7][2][][] */ 28,-22,28,-7,38,-7,108,2,45,22,-14,-20,-20,103,-37,67,-45,-7,12,-27,-47,-11,-37,47,2,-15,23,-21,-28,16,-3,-61, -46,-45,50,-68,22,-13,72,13,25,36,16,-10,-52,94,-12,100,-53,8,-14,-40,-60,17,-63,73,-5,2,18,-12,-1,51,-29,-50, -21,-22,42,-52,-3,9,107,1,53,37,16,-13,-54,77,-89,91,-51,11,5,-30,-62,20,-56,99,-21,19,-16,-55,-57,58,-59,-94, 
  /* [8][0][][] */ -61,-16,10,-27,-9,-2,16,33,9,-5,-25,36,14,18,-4,20,-23,-21,17,-40,-24,-16,19,-15,-31,-18,-16,-52,-6,-23,4,10, 58,37,14,5,21,40,-3,24,28,19,-12,27,55,7,19,3,-1,-6,-23,73,20,-42,7,-7,-30,42,4,-52,-33,-31,-22,-10, -11,36,16,30,-33,-12,-81,-22,50,-32,10,-18,65,-40,88,-16,127,-16,19,72,50,-46,69,20,55,27,53,-17,-14,-44,110,10, 
  /* [8][1][][] */ 48,59,-69,12,-17,2,7,-22,-7,16,-11,15,52,-3,-93,6,-85,-7,19,4,58,-24,-37,-35,-24,6,-16,-24,34,20,-17,-34, 38,57,40,29,-3,41,5,-39,71,-31,5,0,65,-26,6,-17,-6,-30,11,-1,13,-5,37,6,24,57,-23,50,20,-18,24,58, 52,5,53,28,2,-39,-88,17,-33,22,-3,10,56,-15,58,7,31,-8,12,20,-17,-26,34,-26,13,-18,-9,-8,-19,18,7,14, 
  /* [8][2][][] */ 30,77,18,1,25,73,8,21,41,-1,-22,18,86,37,-53,-28,-55,-33,-3,-32,-9,-15,-22,-34,-58,30,-46,15,24,-14,-68,44, -2,29,20,-17,28,-49,25,7,2,-49,-20,-32,54,-3,65,-26,78,-22,24,75,6,-13,-8,20,-22,-50,-6,50,-12,15,61,27, 79,-103,-1,22,-32,-58,-9,-4,-56,27,-1,-20,39,-29,57,-13,33,7,-9,-27,62,8,29,60,-25,-21,23,15,37,-9,11,31, 
  /* [9][0][][] */ -38,-96,23,-24,78,78,-125,-32,-12,104,110,-102,24,42,102,-66,-92,-3,92,10,10,-29,43,26,-90,68,42,99,78,7,-36,-84, 8,55,11,24,-32,104,51,1,-34,-43,-28,-8,61,53,-118,45,-5,4,21,-20,-46,93,35,82,-89,-45,-114,-79,74,-43,40,93, 82,-119,-127,-107,12,47,-4,-72,-20,47,69,-107,-57,52,-68,-113,-33,113,58,-51,62,-91,37,-53,74,85,69,86,-86,63,-92,18, 
  /* [9][1][][] */ -25,67,72,61,99,-96,7,-35,52,13,-68,27,54,-66,-39,-60,-106,61,-58,46,-10,-55,95,52,-109,-71,22,-86,-68,40,4,62, 93,-29,-119,-59,-119,-2,-14,-21,103,37,15,-105,-68,-81,107,15,-54,-66,39,-118,33,-42,57,-48,-107,2,-48,-87,21,16,-104,-119, -27,38,-58,-60,-86,-64,40,-56,-37,-52,-23,-30,-104,95,-3,39,85,-88,-32,3,-85,-41,-109,-72,91,-27,-25,-20,44,-55,0,-44, 
  /* [9][2][][] */ 27,16,-71,-34,65,-3,44,-23,60,56,-1,-105,51,-17,-12,-43,109,79,52,-32,93,15,34,111,14,105,-39,-99,-18,23,-43,-95, 111,-42,12,-46,110,-16,39,-99,-67,-55,-24,14,32,-50,38,69,-98,29,47,8,-92,31,55,40,36,36,65,-1,-87,-29,-97,-88, 104,-57,-66,-58,56,12,-50,-62,18,-12,71,-100,74,-57,14,104,-11,94,-64,40,39,61,44,29,107,-23,37,-102,-57,-83,-40,23, 
  /* [10][0][][] */ 40,-13,72,7,-4,-28,12,13,43,15,5,16,27,33,35,2,11,3,-4,-49,48,11,110,68,43,20,17,83,47,-10,-43,73, 55,-81,39,3,-3,-19,-29,3,-102,36,18,-27,-53,-40,-14,60,-26,-23,-25,9,77,32,89,112,30,-97,25,69,49,11,-17,81, 76,7,96,4,-25,-11,-16,-28,-10,-23,20,26,-47,-4,-7,18,16,-4,5,-4,92,28,102,34,19,-35,35,86,110,21,-7,122, 
  /* [10][1][][] */ 75,0,47,11,9,38,15,33,25,28,-27,-19,-30,52,-43,17,15,-36,26,-3,30,-9,72,35,13,-10,-40,89,39,27,-14,37, 107,-15,107,25,-41,37,18,-43,-29,-10,-5,-17,-25,-29,-2,-13,-51,17,21,7,46,4,26,52,-12,-2,9,88,101,-43,-52,51, 45,-29,63,33,-19,-35,10,8,-7,-22,1,7,-67,23,28,26,-25,-12,-19,60,15,4,53,82,-1,-22,18,32,44,-23,31,-3, 
  /* [10][2][][] */ 100,-26,5,11,-35,33,44,1,-57,-9,-27,15,-28,57,-12,21,-8,-26,36,5,62,60,20,88,57,-64,4,127,115,14,-33,50, 69,-21,84,43,19,-21,78,12,-42,14,-28,28,-36,4,-72,86,-43,-4,24,-46,34,1,72,113,35,-70,-55,59,20,23,-93,62, 116,-32,7,42,-28,30,8,-33,-69,13,29,5,-63,-2,-36,3,-18,-35,26,15,55,31,22,14,47,-2,-21,110,86,-18,-56,40, 
  /* [11][0][][] */ 92,-64,42,78,-16,-42,66,-6,-14,26,19,-20,12,23,66,86,76,10,-27,85,114,-6,92,81,48,-7,-9,69,67,29,57,58, -6,-26,49,12,-10,-1,2,-26,-14,-22,-10,-18,-16,14,25,-2,-17,-25,-8,29,30,-4,44,1,-7,-5,3,32,27,-18,-3,21, -42,-15,14,22,17,-14,-2,-14,2,5,-9,-28,-1,-29,15,-11,56,-6,17,31,-15,-12,-23,-10,-6,0,38,8,-16,32,69,24, 
  /* [11][1][][] */ 110,32,5,53,-9,6,127,12,75,-15,-21,-24,22,113,-82,87,-74,-23,-28,22,60,26,11,-6,-22,78,-52,-16,-4,9,-77,-43, 82,-17,13,9,15,-41,-8,0,-12,-42,7,-41,68,-12,17,16,51,-25,-16,39,11,-45,17,-20,54,33,-1,24,-9,-15,51,24, -34,-56,-23,-24,24,-41,-43,-10,-49,-23,1,-12,30,-57,50,-70,50,-24,3,31,-32,-26,4,-4,34,-30,52,-36,-18,15,77,2, 
  /* [11][2][][] */ -38,41,25,-68,23,6,13,4,25,29,28,-12,-25,28,-55,-8,-51,13,-4,-40,-56,37,2,4,-39,-13,-24,85,63,27,-84,-3, 8,27,9,-11,-16,33,48,13,4,-20,-26,25,79,43,-9,6,25,4,-27,-3,-10,32,1,13,23,50,-31,47,-8,-26,-13,22, 9,-31,20,22,7,-5,23,20,-31,-34,-25,-1,-4,-7,101,-13,91,-14,17,28,29,-2,18,2,53,-28,-1,-58,-1,10,74,4, 
  /* [12][0][][] */ 90,29,57,10,5,36,23,-33,-4,-8,31,-7,41,-50,39,22,34,14,-17,9,55,25,48,63,-2,47,2,97,81,14,18,60, 37,-2,47,-53,-2,4,-59,7,6,-11,-31,4,-8,-33,16,-1,37,-18,32,-2,1,-9,0,36,0,-5,-5,43,19,-25,-2,21, -26,31,3,41,-27,-27,-105,-15,34,-9,6,10,21,-44,55,-53,55,9,-8,57,-21,10,-12,-25,-11,15,-18,-1,-28,25,69,-5, 
  /* [12][1][][] */ 45,67,14,-13,4,-5,54,8,36,32,25,21,99,45,-16,27,-27,15,-3,40,68,37,-40,-11,-18,20,-53,-3,10,5,-34,9, 59,30,27,73,-8,-11,10,11,-20,5,-8,-46,73,29,31,34,28,-2,14,26,78,-37,42,50,20,28,-9,-35,10,-19,28,7, 77,4,23,39,-28,-27,-29,-32,41,-8,-23,4,97,-44,74,-63,127,-17,31,83,39,-46,12,3,14,19,35,-63,-12,32,91,-6, 
  /* [12][2][][] */ -53,-16,34,-75,40,11,56,8,2,28,15,46,-59,64,-97,-2,-57,20,-4,-76,-68,30,-18,36,-25,-15,-8,-30,-60,26,-28,-50, 48,56,3,35,-9,34,40,-29,41,-29,-24,18,90,47,-99,45,-84,27,-11,16,51,-17,-16,-44,9,54,-32,-45,-74,-23,-29,-27, 28,-7,-20,32,8,-35,-16,-2,66,11,13,-16,53,25,91,-24,94,-20,19,53,25,-31,23,-7,29,30,52,-7,-3,-6,92,32, 
  /* [13][0][][] */ -38,-11,31,21,-27,-23,-35,-23,-34,-7,7,-6,0,-6,-22,-22,-15,-21,-17,17,15,8,66,51,-16,-26,13,-48,-10,4,16,36, -4,-15,40,-21,-4,31,-28,13,0,-26,7,-14,-58,-16,-14,2,-42,11,-3,-12,35,6,65,43,-13,-37,-20,-40,51,-1,-11,12, 4,-19,44,-1,13,24,-28,13,-30,-17,-9,33,-10,-5,-18,-6,-40,-24,-14,-2,75,-27,32,70,-21,-60,17,16,66,7,-10,80, 
  /* [13][1][][] */ 107,-42,49,33,-27,13,-27,5,-45,-1,22,-6,-24,-43,12,-20,22,-21,21,-5,85,-8,38,31,38,-42,9,92,107,11,-32,70, 85,-28,38,13,-17,-15,-33,5,-64,-19,21,-12,-63,2,-10,-9,-27,24,27,-32,34,55,63,34,78,-103,-23,116,87,11,-13,83, 75,-10,37,-2,13,26,48,-31,-14,11,-7,-33,-16,-13,-34,48,-12,25,27,-39,39,4,21,35,67,-59,-23,114,79,-30,-24,10, 
  /* [13][2][][] */ 72,-26,66,22,-11,21,127,9,25,16,-18,33,-52,108,-50,96,-48,23,-22,-54,54,11,-15,82,-29,17,-35,42,38,39,-63,-22, 90,-46,59,14,-26,-4,71,10,19,36,9,-12,-14,44,-51,95,-26,0,19,30,82,19,70,114,8,5,-8,25,88,45,-23,34, 26,-65,68,23,26,-36,57,-2,-28,18,-16,-24,-67,45,-12,22,12,25,-19,-24,-3,48,49,44,24,-5,18,81,55,27,18,17, 
  /* [14][0][][] */ 60,-14,36,-9,-28,69,-48,-23,-24,-2,-24,22,-33,-43,-52,-29,-65,22,16,-74,67,17,81,74,31,-48,28,74,102,-31,-41,80, 6,62,103,-20,-13,3,7,10,22,8,-24,17,3,-19,5,-14,3,8,-2,63,30,20,65,56,61,38,26,69,95,-23,-22,113, -42,3,35,5,22,-2,18,-15,-11,28,11,9,-20,-14,31,22,67,-16,-10,42,-37,31,-37,-1,-1,15,19,-8,-50,11,16,-6, 
  /* [14][1][][] */ 41,63,48,-35,-1,-3,22,-20,41,7,25,-5,-16,-1,-1,16,-39,21,23,-23,12,50,34,27,8,50,-36,95,43,-9,-13,30, -37,26,70,-37,-3,0,29,-5,-23,-11,8,-26,-58,9,32,2,30,-26,22,38,-7,34,3,-6,47,-11,14,76,27,-31,41,33, -100,-102,-77,-12,-15,11,-50,15,-63,7,9,-20,-47,-82,-2,-15,22,9,10,-36,-40,36,-24,-5,6,-89,-20,-14,-21,7,48,-35, 
  /* [14][2][][] */ 49,-6,60,58,-46,-42,-60,-28,18,-44,-4,-28,14,-47,26,-24,56,-6,-5,22,53,-23,13,50,62,-34,20,55,11,9,0,10, -55,-92,14,-3,-36,-54,-26,10,-111,20,18,-3,-109,-63,23,-7,21,18,2,-74,10,8,50,30,3,-127,-1,11,34,11,-4,3, -9,-70,14,8,-26,24,-56,-6,-67,-6,0,-9,-43,-100,-11,-6,-49,-12,-16,-32,13,-12,25,53,-51,-106,-23,13,16,6,-51,49, 
  /* [15][0][][] */ 21,43,14,26,-30,-32,-107,-15,-6,-4,-4,-21,74,-39,70,-52,56,-19,15,27,4,-10,0,16,13,-7,31,-17,-3,-26,37,29, 2,27,-35,4,-21,56,-55,32,-18,-33,10,-2,10,-22,-1,-39,-62,-7,4,20,82,-23,-19,0,8,-26,35,-22,45,-20,-36,20, 58,71,27,16,-20,94,-58,23,49,-61,0,25,55,-68,-26,-30,-45,13,6,36,85,-15,108,41,32,10,-17,46,74,-75,-45,105, 
  /* [15][1][][] */ 37,73,27,38,-40,-35,-110,-43,87,-3,18,-27,127,-66,82,-26,79,13,33,74,34,-42,39,-30,22,34,22,-2,36,-25,50,-31, 54,100,54,31,-43,0,-79,-30,-14,-28,-5,-1,44,-44,-20,-91,-36,-3,-36,64,27,-2,28,-63,-7,20,-35,77,18,-64,-8,31, 41,85,61,47,-3,10,-11,-57,31,-37,11,-40,33,20,-17,-30,12,-4,-27,26,28,16,40,5,-4,-27,-63,49,59,12,-28,80, 
  /* [15][2][][] */ 104,70,118,79,24,11,74,26,59,-26,-12,-21,112,20,38,35,46,-27,35,31,91,-15,18,-4,31,47,-14,-12,-7,10,-25,20, 85,27,85,101,-13,1,-3,1,-3,-63,19,-19,85,-27,47,15,35,23,1,43,42,-7,6,62,55,-3,14,37,61,0,28,59, 73,-74,73,56,-4,-39,30,5,-10,21,30,-15,-36,33,61,73,83,25,-22,11,13,64,49,2,30,-73,0,33,-4,-10,4,11, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0042855944484472275, 0.0036094947718083858, 0.0045730075798928738, 0.0041178492829203606, 0.0042088781483471394, 0.0044250711798667908, 0.0036391126923263073, 0.0042845401912927628, 0.0036030975170433521, 0.0010120932711288333, 0.0031390087679028511, 0.0039468896575272083, 0.003573176683858037, 0.0041127032600343227, 0.0042227073572576046, 0.0032407934777438641, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[16] = { -249, 547, -686, -639, -825, -729, -66, -221, -103, -1418, 289, 565, -698, -137, -188, 858, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 1.8693555830395781e-05, 1.5744441043352708e-05, 1.9947237888118252e-05, 1.7961860066861846e-05, 1.8358923625783063e-05, 1.9301947759231552e-05, 1.5873634765739553e-05, 1.8688957425183617e-05, 1.5716537745902315e-05, 4.414701834321022e-06, 1.369220444757957e-05, 1.7216141714015976e-05, 1.5586023437208496e-05, 1.793941373762209e-05, 1.8419244952383451e-05, 1.4136184290691745e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[10*784] = { 
  -8, -10, 2, -4, 9, -17, 1, -17, -12, -17, 14, 0, 2, 2, 3, 10, -5, -4, -19, 19, -1, 8, -14, 9, 0, 9, 5, 20, 15, -21, -14, 26, -2, -15, 8, -10, -12, 15, 14, -6, 8, 0, 19, 17, -6, -23, 2, -7, -4, 13, 3, -4, -18, 13, 24, 9, -23, 6, 14, -13, 4, 16, 18, 10, -3, -22, 6, -17, -19, -23, 9, -18, -7, 4, 18, -16, 18, 2, 9, 8, 24, 7, 12, -3, -1, -20, -8, -1, 5, -21, -6, 3, 21, 8, 21, -13, -14, 21, -7, -3, 4, -22, -10, 20, -7, -5, -12, 14, 16, 4, -12, -9, 7, -3, 7, 14, 11, 18, 6, -4, 21, 10, 21, 13, -2, -17, -17, -2, -28, -35, -22, -31, -14, 18, -13, -28, -18, -4, -5, -25, 3, 9, -4, 2, 9, -69, -17, 36, -35, -31, -52, 1, -30, 3, -43, -27, -24, -56, -69, -17, -18, 6, -41, 41, 17, 1, -31, 12, -43, -14, -36, -19, 5, -16, -47, -38, -34, 25, -5, 9, -16, 8, -56, 9, -56, -18, -12, -1, 40, -13, -60, -27, 2, -16, 12, -5, -13, 13, 13, -33, 11, -23, 25, -13, -19, 30, 55, -8, -22, 8, -21, -11, 18, 16, 18, -7, 17, -13, 19, -2, 3, -22, 19, -14, 17, -14, -8, 22, 13, 4, 7, -25, 3, -20, -5, -9, -12, 26, 20, -10, -30, 20, -17, -8, -15, -8, 0, -55, 15, -2, -34, 18, -3, -60, -16, 3, -29, -11, 16, -52, 17, -8, 14, -12, -8, -8, -52, -8, 22, 13, -11, 14, -7, -7, 12, 46, -2, 29, -37, 42, 7, -2, -5, -14, 19, -13, -99, 1, -28, -21, 13, -11, 44, -14, -21, 16, 10, -3, -21, -7, 25, 40, -103, 4, -35, 3, -8, -4, 31, -4, 34, -14, 36, 13, -14, 44, 4, 3, -12, 17, -16, -14, -20, -14, -12, -17, 10, -6, -13, -20, -5, 5, 17, 12, 4, 13, -6, 20, -14, 15, 12, 13, -5, -5, -13, -7, -10, -9, -18, 12, 4, 11, -2, 22, 12, -15, 14, 17, 1, -23, 7, 2, -42, 42, 30, -13, -6, 0, -102, 52, 5, -32, 40, 27, 21, -64, 38, -5, -23, 41, 36, -24, 28, -6, 4, -1, 19, -17, -32, 57, -13, -51, -49, -15, -23, -56, -27, -46, -34, 4, -51, -1, -17, 20, 32, 13, 3, -75, 37, -14, -36, 27, 23, -58, -30, -18, -28, 39, 20, 9, -17, -1, 36, 10, 12, -1, 14, 17, 16, 17, -1, 26, -16, -11, -22, -12, -15, 18, -17, 12, 8, 20, -15, 22, 5, 3, -18, -16, -14, -14, 17, -10, -13, -11, -5, 17, -4, -22, 10, -10, 22, 13, -2, 11, -32, 21, -1, -6, 5, 10, 29, -24, 5, -14, 14, 59, 38, -51, 17, -28, 17, 43, -5, 22, 41, -8, 28, 6, 38, 12, -22, 10, 34, -36, -34, -34, 37, -20, -13, 43, -73, 46, 11, 17, -8, 15, -4, 24, -5, 41, 47, 4, -20, 6, -12, 0, -12, -1, -9, 7, 7, -1, -36, -56, -31, 2, 21, -49, 1, -2, -21, 1, -7, 22, 0, -42, 31, 5, -1, 12, -28, -10, -7, -7, 17, -6, 21, 8, 3, 0, 5, 14, 24, 3, 21, -13, 12, 6, 17, -8, -8, -8, -12, 23, -25, 17, -7, 2, -15, -7, 21, 2, -24, -4, 9, 18, 3, 4, -8, 18, 13, -6, 32, -17, -10, 2, -6, -24, -21, 0, -10, -4, 13, -7, -37, -11, -13, -4, -23, 5, -2, -8, 8, 1, -2, 22, 27, -12, 14, -64, -10, 19, -15, -25, -26, 5, -35, 13, -13, -15, -10, 27, 12, 23, 1, -34, -34, -25, -7, -15, -52, 3, -50, 0, -48, -7, -27, -22, 14, -26, -7, -34, -15, 5, -5, -9, -39, -33, -17, -16, -19, -58, -27, -3, -21, -42, -21, 15, 1, -15, 3, 21, 11, -13, -18, -2, -6, -2, 10, 15, 7, 3, 11, -4, 15, -12, -2, -19, 20, 11, -9, -8, 3, 21, 7, -12, 11, -16, -6, -6, 14, 3, 13, 2, -8, 19, 14, -23, -15, -6, 13, -6, 8, 14, 9, 4, 7, -9, 9, 17, 7, 22, 6, -10, -2, -12, -2, 2, 1, 0, -15, 14, 15, -11, -1, -13, -8, 1, 12, -3, -16, -15, 7, -14, 5, -13, 5, 22, 6, 4, -24, 17, -12, 2, 2, -7, -5, 3, 5, -14, -11, -10, -9, -12, -2, 4, -16, 2, 9, 7, -19, 15, -10, -20, -6, -12, 22, 20, 6, -1, -1, -2, 13, -3, 4, -2, 8, 6, 7, 0, 17, 13, 16, -16, 
  26, 22, 16, -11, -9, 19, 17, 10, 6, -6, 6, 28, 3, 24, 20, 2, 2, -2, 23, -13, 13, 6, 33, -3, 22, -22, 18, 3, -3, 9, 12, -11, 14, 18, 26, -3, -9, 23, -7, -2, 30, 2, 16, 1, 30, 30, 5, -2, -5, 1, 16, 1, 19, -3, 10, -3, -4, -23, 11, 32, 14, 3, 20, -10, 5, 29, -7, 18, 13, 5, -10, 2, 1, 7, -13, 31, -8, 9, -10, 25, 29, -12, 14, -5, 29, 4, 4, 28, -14, -5, 15, 31, 25, -1, 14, 15, -7, -11, -17, 24, 9, -14, 35, 10, 29, -8, 14, 4, 14, 30, 15, 2, -6, -4, 1, -4, 23, 22, 4, 10, 22, 18, 15, -2, 16, 13, -3, -4, -8, 0, 14, 20, 18, 5, 13, -14, 0, 17, -27, 15, 7, -7, 13, -18, 12, 0, 8, -13, 35, 25, 12, 21, -27, -9, 1, -12, -8, -48, -3, -28, -15, 35, 38, 19, 33, 40, 35, 5, 1, 17, -20, 36, 3, -20, 37, -15, -19, 2, -2, 20, 2, 6, -10, -18, -35, 17, -25, -46, 4, -65, -17, -14, 12, -19, -14, -13, -13, -13, 15, 14, 1, 19, -12, -20, -1, -22, 9, 6, 7, 2, -16, 18, 5, 3, 32, 14, 7, -19, 5, -11, 5, 1, 25, 4, 4, -9, 8, 27, 13, -9, 25, -2, 29, 22, 4, -6, 1, 13, 13, 10, -27, -25, -5, -2, -14, -3, 6, -51, -5, 18, -32, 7, -21, -20, -4, -44, -18, -30, 5, -38, -15, 38, -63, -59, -49, 4, -57, -27, -56, -70, 3, -40, -88, 17, 48, -9, 36, 42, 6, -77, 24, 12, -54, 19, 9, -52, 24, -30, -12, 4, 1, 13, 8, 17, -65, -41, -79, -17, -41, -60, -30, -73, -42, 11, -4, -24, 22, -16, 0, -16, 0, -11, -12, 11, -41, -11, -2, -53, -17, -48, -5, 26, 0, -15, 19, 7, 0, 8, 28, -12, 0, -12, 12, 23, -13, -4, 11, 13, -7, -3, 25, -5, 23, -11, -5, -12, 32, 14, 3, -6, 8, 4, 16, 1, 11, -16, -19, 22, -23, -44, 10, 22, -9, 3, 2, -49, 14, -45, -69, -77, 24, 5, -32, 22, -60, -41, -84, 0, -81, -41, -68, -30, 4, -57, -96, 16, 42, 3, 23, 47, -11, -32, 21, 13, -73, -18, 4, -72, -17, -47, -28, -1, 7, -16, -14, -33, -84, -55, -78, 2, -16, -74, -71, -87, -54, 9, -1, -35, -4, -13, 13, 17, -23, -11, -10, 3, -28, -15, 4, -28, 3, -61, -4, 13, -10, 17, 31, -3, -1, -2, 14, 9, 17, -16, -7, 12, 16, -13, -11, 1, -9, 7, -7, 25, 26, 10, 2, -22, 8, 0, -12, -14, 13, -10, -20, -9, 24, -9, 7, -3, -12, -24, -13, -5, 0, 14, -14, -26, -11, -37, -55, -74, -7, -56, -38, 5, -90, -59, -78, -11, -71, -70, -45, -27, -17, -21, -81, 6, 15, 24, 28, 46, 12, -32, 11, -20, -38, 12, -12, -82, -27, -54, -19, -33, -11, -34, -1, -9, -69, -38, -32, -18, -7, -14, -38, -29, -40, 40, -42, -35, 12, 21, -2, -10, 5, -18, 18, -19, -55, -30, 4, -19, -8, -59, 19, 15, -18, -6, -6, -12, 17, 9, 32, -19, -8, 2, 6, -1, 8, -18, 2, 14, 6, 4, 3, -3, 26, -8, 15, -22, 3, 24, -5, 4, 18, 28, -15, -11, -18, 5, -19, 22, 3, -1, -6, 9, 23, -1, 15, 3, 8, -12, -15, -8, -2, 19, 17, 29, -67, -8, -26, -4, -25, -16, 8, -14, 3, -12, 16, 30, -4, 37, 59, 29, 48, 0, 61, 3, 32, -7, 24, -1, 13, -7, 37, 36, 25, 29, 6, 36, 1, 2, -16, 10, 16, 37, 11, 44, 18, 29, -19, 15, -18, 16, -15, 3, 5, -13, -18, 2, -1, -42, 13, -1, -4, -32, -14, 14, -18, 14, 18, 4, -9, 26, 11, 1, 27, -10, 19, 0, 2, 22, -4, 7, -3, 7, -8, -12, 6, 26, 0, -6, 15, 15, 14, 11, 13, 19, -2, 2, -12, 7, 0, -8, 1, -4, 12, -9, 6, 29, 22, 17, 7, 2, 27, 2, -15, 27, 11, 16, 30, 21, 2, 19, 35, -9, 0, 34, 11, 31, -3, 24, -5, -1, 11, -8, 7, 28, 29, -10, -5, -4, 33, -7, 12, -1, 26, -2, -1, 7, -9, 12, -3, 15, -3, -20, -3, 26, -13, -2, 0, 27, 15, 29, 11, 30, 9, 13, 15, -12, 29, -11, 26, 2, -5, 3, 2, 28, -2, 15, 24, 22, -8, -14, 18, 1, -1, -15, 12, 13, -1, 13, 25, 27, 
  -26, 12, 7, 3, 14, 13, 13, 2, -5, 22, -4, 14, -12, 3, 21, -8, -2, 9, -8, 12, -24, -5, -14, -16, -12, 22, 3, 8, 8, 15, 10, -7, -1, -19, -3, 12, -7, -9, 6, 10, -10, -19, 6, -21, 11, 11, -3, -9, -3, -11, -11, 18, 18, -15, -13, -20, 14, -1, 1, -10, -23, -26, -5, 8, 20, -6, -2, -20, 11, 10, 1, -10, 12, 10, 3, 11, -11, -5, -21, 13, 9, -10, -15, -22, -16, 7, -6, 5, -16, -20, -12, 2, 4, 16, -14, -26, 15, -19, -16, -11, -2, 15, -7, -19, -22, 23, 7, -5, -17, -25, -5, 13, -10, -15, 14, -5, 20, -15, -5, -13, 17, -4, 7, -16, 22, 19, -9, 11, -16, -31, -10, 7, -36, 16, -38, -34, -2, 13, 31, -28, -41, -16, -19, -8, 10, -19, 9, -2, 17, -7, 15, 10, 37, -11, 23, 28, 17, -8, -22, 4, 12, 1, 12, 19, -16, 16, -30, 11, -31, -2, -21, 9, -18, -11, -27, -15, -33, 5, -13, -26, -11, 0, -13, 0, -54, 3, -46, -15, 9, -3, 19, -19, 3, -21, -7, 0, -11, -19, -7, -29, -1, -22, -16, -26, -16, -12, 26, -39, 3, -22, -9, -9, 4, -13, -21, -12, -5, -7, -11, -22, 15, 6, -11, -12, -7, -24, 5, -18, -3, 10, 12, -18, -9, 10, -25, -20, -10, 13, -8, -18, 55, -45, -3, 42, -6, -20, 5, 49, -13, 0, 32, -40, -27, 52, 21, 29, 30, -44, 2, 39, -25, 1, -5, 41, -40, 18, 7, -7, -16, 17, 14, -27, 12, 8, -14, 10, 30, 16, 1, 26, -26, -4, -6, 6, 21, 18, -127, -32, -39, -29, 11, -47, 32, 2, 23, -28, -1, 12, -39, 15, 14, -22, -65, -17, -60, -1, 3, 11, -13, -16, -16, -31, 4, -17, -23, -13, -47, -63, -9, -20, -13, 9, -3, -13, 8, -8, 21, -13, 5, -22, -17, -15, 3, -21, 15, 8, -12, -10, -12, -21, -9, -10, -22, -13, 1, -13, -19, -19, -2, 13, -7, -3, -4, -25, 9, -2, -44, -6, -6, -20, -9, 15, 1, -43, -20, 6, 8, -37, 22, -80, -68, -73, -40, -65, -22, -46, -8, -12, 18, -44, -28, 44, -55, 29, -7, -28, -58, -33, -3, -79, -4, -27, 28, -16, 9, -6, -3, 12, 65, -1, -5, 5, 2, 26, -75, -1, -21, 13, -6, -21, 0, -10, -5, 22, 3, -12, -9, -8, -29, 9, 18, -12, -57, -6, -47, 2, 2, -57, -6, -14, -21, -21, -9, 4, -12, 20, 12, 2, -18, 13, -18, -9, -17, -23, -8, -7, 16, -2, 14, 10, 20, 23, -19, -6, 4, -9, 13, 12, -5, 12, 20, -9, 9, 10, 27, -29, -6, 39, 35, -21, 17, 52, 19, 23, -1, -15, 2, 21, -15, 46, -4, 0, 0, 34, 28, -16, 25, 8, 22, 0, 38, 14, 35, 57, 41, 78, 20, 13, 22, 7, -1, 65, 12, 34, -14, 5, 29, 8, 21, 28, -6, 12, 52, -2, -76, 4, 46, -67, 8, 52, -19, 0, 17, 20, 16, 60, -12, -9, 40, -43, 20, -19, -21, 5, 6, 44, 13, -7, 37, 49, 7, 63, 30, 24, -24, 12, -20, -14, -14, -11, -13, -16, 15, -20, -9, 9, 14, 9, -20, 1, 15, -12, -10, -10, 16, 13, -17, -5, -19, -23, -27, -17, 6, 8, 0, -6, -9, 39, -8, 16, 36, 18, -4, 30, -4, 7, 11, 11, 23, 30, 5, 22, 21, 53, 16, 34, 15, -15, 38, 3, 38, -10, 2, 20, 6, -16, 53, 13, 10, -37, -24, -20, -81, -5, -27, -14, -54, 10, -5, 9, -10, -10, 2, -18, -69, -34, 8, -35, 11, -7, 1, -23, 46, -11, -34, -32, -18, -23, -60, -26, 17, 33, 25, 18, 13, 2, 41, 15, 1, 13, 50, 35, 45, 15, 11, 21, -10, 18, 6, -16, -8, 14, 5, -14, -17, -7, -20, 14, 1, -26, 8, -15, 6, 2, -6, -5, -26, -10, 4, 6, 10, 19, -1, 17, 0, -17, -1, -10, -19, 20, 19, 0, -16, 18, -6, 10, -17, 8, -17, -18, 16, -2, 6, -2, -1, 4, 10, 15, -28, 20, -13, 7, -16, -1, -2, 5, 8, 5, 18, 13, 4, 2, 19, -14, 3, 18, 16, -20, -7, 4, -8, 4, 13, -17, 23, -5, 8, 7, 9, 11, 14, 10, -2, -20, 19, 8, 8, -23, 1, 9, -21, 13, 1, 16, -5, -16, -22, 4, 3, -3, 8, -13, 6, 4, -11, 2, -16, -2, -12, -22, 14, -15, 6, -21, 5, 8, -16, 23, -4, -21, 12, -9, 10, -22, 
  -28, 5, -11, 4, -23, 17, 3, -10, 11, -5, 10, -4, -26, -19, -7, -14, -2, 14, -25, -6, 12, -3, 3, -4, 12, -11, 11, 19, 7, -7, -23, 14, 5, 12, -13, -1, -12, 5, -21, 9, -11, 21, -15, -23, -24, -4, -13, 5, 4, -23, -15, 17, 19, -27, -2, -16, -28, 3, -16, -22, -10, 10, -9, 16, 10, -25, -21, 11, -9, 9, -16, -10, -16, 10, -24, -13, -20, 15, 15, 14, 5, 2, -23, -4, -15, 9, -14, -13, 15, -17, -31, -13, 19, 4, 2, -13, 8, -23, -12, -15, -6, -11, -14, -11, -10, 6, -16, 7, -2, -28, -13, 1, -21, 0, 13, -21, 13, 1, 15, 16, -1, 16, -26, -6, 5, 17, -7, -15, -9, 6, 0, 2, 2, -19, 9, -6, 11, -22, 1, 21, -19, 19, 15, 24, 0, 6, -9, -23, -15, -5, -5, -2, 8, -13, 25, -9, 13, 11, -17, -18, 23, -11, -3, -14, -19, 3, 16, -21, 38, -19, 3, 22, 18, 25, 38, 8, -1, 1, 3, -9, -3, 7, 13, -7, -26, -18, 7, -11, 17, -35, 22, 5, -35, 9, 26, -13, 5, -21, 3, 0, -8, 2, -13, 6, -8, -38, 30, -19, -4, -16, -15, 10, -11, -3, 18, 0, 1, -8, -15, 6, 3, 2, -13, -8, 1, -15, -10, -17, -14, -16, 2, 9, -15, -14, -16, -1, -20, -12, 12, -25, -4, -13, 4, 3, -54, 4, 11, -7, -36, -3, -5, -9, -16, -7, 16, 8, 31, -96, -99, 17, -57, -69, -35, 7, -39, 1, 12, -84, -53, 3, -44, -38, 25, 6, -23, -21, 27, 31, 35, -10, 30, 18, 27, 23, 7, 23, 52, -16, 25, 8, 20, -50, -19, 2, -21, -40, -59, 1, 22, -6, -47, -29, 52, 21, -31, -61, -49, 2, 1, -21, -12, -57, -11, 3, -34, -42, -50, -42, 7, -19, -24, -4, 16, 6, 1, -13, -14, -8, -15, -1, 12, 5, 14, -14, -12, -5, 9, -28, 6, -14, 11, -23, -14, -19, -27, 9, -13, -29, 16, -20, 7, -8, 1, -9, 6, -24, -65, -5, 16, -23, 3, 18, 3, -15, 16, -35, 18, -3, 3, -94, -38, -13, -57, -25, -33, 25, -71, -21, -24, -89, -83, 0, 22, -42, 32, -5, -66, 0, 24, -31, 0, 26, -1, 15, 27, 5, 17, 9, -10, -45, 29, -25, 11, 0, 16, 6, 5, 22, 39, -23, 15, 27, 36, 52, -47, 26, 9, 26, 22, 0, 26, -12, 27, 5, 29, -10, 6, 29, 2, 48, 10, -5, 4, -22, -10, 16, 6, -14, -9, -12, -21, 19, 6, -12, 10, 8, 21, 13, 3, -22, 7, -15, -10, -15, -8, -23, -14, 17, 3, 14, -9, -2, 5, -7, 3, 18, -27, -26, -12, 2, -18, -22, 13, -11, 7, 9, 25, 2, -21, -43, 30, -37, -24, 8, -10, -47, -21, -3, -22, 2, 11, -10, -5, 27, -31, -42, 16, -19, -83, -17, -40, -101, -20, 22, 10, 14, 23, -1, -15, 47, 44, 4, 16, -8, 2, 14, 3, 0, 2, 27, 16, -20, 28, 17, 17, 26, 32, -18, 10, 51, 23, -8, -20, -3, 2, -16, -18, -19, 41, 19, 2, 25, -10, 8, -11, -4, -17, 0, -5, -10, -11, -18, 9, -12, -23, -15, 9, 18, 18, 4, -2, -26, 3, -13, 9, 16, 6, 11, -21, -3, -18, 5, 17, -27, -23, 3, -20, 15, 19, -11, -24, -9, 18, 9, -14, 10, -21, 1, -28, 0, -3, 16, 14, -3, -5, 1, -13, 12, 44, 38, -37, -19, 32, 8, 1, 35, -13, 22, 43, -22, 43, -58, 24, -30, 22, -6, -78, 11, 35, 34, -4, 10, 21, -2, 14, -2, 0, -49, -10, -25, 20, -51, -71, 12, 6, 16, 16, -42, 23, -39, -40, -35, -53, -7, -16, -32, -60, -54, -19, -21, -32, -20, -34, -30, -53, -38, -24, 2, -11, -21, -20, -4, -16, 5, 11, 2, -28, 13, -30, -17, 10, 5, -7, -16, 17, -12, -28, -10, -9, -24, -8, -20, -10, -6, -23, -2, -22, -17, 5, -4, 0, 16, -19, -18, 1, 5, -5, -8, -17, -11, -21, 11, -12, -21, -3, -27, -9, -1, -25, -8, 11, 3, -6, 0, 6, 0, 12, -21, -16, -18, 5, -24, -9, 9, 5, -24, -6, 2, 7, -20, 0, 11, -23, -12, 2, 10, -8, -22, -19, 0, -18, 1, 3, 11, -9, -6, 3, -3, -23, 3, 8, -2, -13, -27, 2, -8, -25, -18, 15, 0, -26, -6, -6, -20, -22, -8, 5, 14, -10, 8, -17, -6, 14, 12, 0, -17, -10, -20, -13, -12, -9, -8, 8, 7, 
  -3, 9, -18, 8, -2, -15, 11, -19, -3, 3, 14, -21, 1, -21, -9, 12, 4, -17, -18, 9, 23, 10, 15, -19, -1, 18, 8, -4, 4, 7, 6, 0, 6, 14, -20, 14, 11, 1, -21, 8, -16, 4, -23, -5, 4, -6, 4, -21, -7, -19, -7, -13, 12, -16, 12, 16, 12, 18, -24, 20, -23, -17, -16, 17, -10, 11, -10, -4, 5, 25, 4, -12, 20, 8, 6, -17, 25, -2, 15, 11, 7, -15, 20, -5, -19, -8, 19, -7, -22, -1, -18, -16, 8, 15, 21, -5, 11, -6, 9, -18, -15, -4, 18, 2, 4, 14, 8, -6, -10, -26, 14, -11, -8, 13, 19, 18, -20, -13, 7, -14, -10, -18, 6, -21, -17, 6, -22, 5, 19, 16, 4, 3, -3, 9, 19, 14, 7, -13, -10, 18, -9, 3, 5, -13, -29, 27, -7, -34, 2, 1, 60, -68, -16, -15, -56, 16, 33, -6, 15, -22, -95, 3, 31, -26, 21, -2, -25, -65, -45, 7, -67, -42, 22, -73, -77, -36, -102, 0, 48, -18, 28, 8, 59, -19, 85, 15, -78, -19, 5, -15, -54, 4, -25, 6, -14, 6, 19, 8, -20, 27, -13, -10, -27, -6, -14, 8, -8, -8, -2, 14, -10, 18, 13, -13, 15, 17, 8, 8, 20, -5, 21, 5, 17, -7, 22, -10, -6, -19, 0, -11, -9, -18, -16, -7, 14, 2, -11, -24, 0, -5, -26, -3, -17, -34, -33, 8, -7, -58, 6, 13, -3, -13, -28, -41, 9, -35, -30, 18, 22, -31, -14, 85, 20, -60, 26, -8, -8, 52, 41, -42, 42, -26, -79, 1, 29, -77, -13, 0, -20, -91, -11, -16, -20, -36, -19, -27, -36, 16, -82, 13, 10, -6, 3, 48, 37, -89, 39, 6, -28, -19, -52, -53, -11, -7, 19, -24, -21, -11, 4, -2, -32, -30, -31, 4, 7, -55, -10, -18, -37, 17, 13, -21, -6, 3, 3, 0, -11, -8, 11, -9, 3, -18, -4, -10, -7, 16, -16, -14, -6, -6, -19, 17, 5, -12, -13, 5, 18, 4, 3, -16, 13, -9, 45, -10, -5, 29, 56, -24, 7, 52, 3, -21, 30, -11, 18, 69, -15, 12, 16, 37, 35, 46, 10, 29, 14, 50, 29, 3, 49, 29, 43, 39, 47, 31, -1, 5, -38, 38, -2, -26, 8, 31, -4, 6, -9, 20, 16, 17, -44, 18, 17, -5, 7, 55, -44, 11, 15, 69, 19, 22, 1, 8, -12, 40, 8, -10, 48, -31, -21, -1, -4, -2, -24, 50, -27, 7, 16, 43, 43, 61, 3, -9, -7, -22, -18, 6, -6, -9, 0, 16, -2, -22, 18, 0, -9, -3, -5, -10, 13, 8, 4, -20, -15, -11, -17, 5, 13, -2, -16, -15, 12, 0, -5, -15, -14, 1, -16, 17, 21, 4, 24, 41, 19, -9, 57, 37, -11, 29, 0, 36, -18, -7, 32, -19, -42, 30, 34, -31, -63, -6, -3, -15, -16, -39, 27, -65, -11, 13, -11, -38, 34, -41, -9, -58, -13, 1, -18, 18, -7, -64, -64, -76, -6, 23, 20, 4, 10, 15, -3, -25, 14, 15, -20, 10, 12, -63, -12, -6, 10, 17, 3, -5, 23, 1, -40, -29, 0, -21, -14, -5, -23, -26, -16, 16, 16, -4, -11, -21, -5, 16, 7, -17, 3, -6, 3, 13, -17, 4, -18, 21, -11, 7, -7, -11, 18, 7, 5, 6, 9, 1, 2, 13, 13, -10, 17, 10, 15, -5, -20, 15, -26, -9, -28, -25, -16, -23, -27, 12, -8, -4, -17, -13, 3, -54, 15, 4, -53, -2, -91, -46, -47, -4, -67, -28, -18, -38, -29, -70, -64, 59, -18, -9, 56, 21, -2, 0, 59, -9, -85, -85, 3, -42, -36, 3, 13, 32, 60, 54, -2, 14, 40, 13, 17, -7, 15, -9, 29, 20, -8, 30, 13, 25, -16, 14, -13, -1, 20, 23, -14, -17, 1, 24, -7, 41, -2, 31, 5, 17, 24, -11, 16, -19, -14, -11, 0, 22, 10, -14, -6, 4, -19, -5, -16, 12, 7, -11, -7, -10, 10, 10, 14, -20, -16, -11, -18, 0, -12, -5, 8, -22, 8, -1, -24, 20, -27, -12, 0, 2, -6, -11, 4, -8, -20, -2, 0, -3, -7, -1, 7, -18, 2, -19, -14, 2, -8, -1, -16, 17, 9, -13, -21, 5, -19, -5, -19, 12, -17, 10, -21, -7, 9, -8, 12, 7, 12, 8, 15, 6, -9, 14, 10, 1, -3, -6, -3, 3, -10, 14, 6, -5, -16, -15, 17, -24, -14, -13, 8, -18, -2, 0, -22, -22, 12, 11, -9, -10, 22, 10, 22, -6, -11, 12, -12, 20, -11, -1, -14, 15, 7, -20, 10, 4, 17, 16, 
  -2, 0, 15, -22, -11, -2, -14, -1, 10, 8, -18, -12, -2, -29, 3, -3, 15, 3, 13, 16, 8, -10, -10, -16, 3, -20, -3, 4, -8, 17, 20, -12, 11, 8, -20, 10, -3, 10, 20, -23, 9, 15, 2, 6, -20, 16, 0, -23, 10, 11, 9, 13, 4, 1, -11, -24, -13, -23, -15, -17, 9, -24, 1, -24, 2, 4, 10, -19, -12, 20, 18, 12, -2, -10, -15, -5, 10, -2, 23, -9, 5, 8, -18, 8, -3, -19, -6, -13, 9, 5, 2, -2, 5, -9, -4, 12, 15, 12, 15, -24, -9, 13, 1, 5, 4, 5, 2, 10, -16, 3, 17, -10, 10, 2, -11, 2, -22, -20, 14, 14, 1, 7, 12, -12, 5, 12, -13, -18, -20, -5, -15, -27, 8, 15, -25, -7, -14, -14, 4, -19, 32, 15, -6, 19, 5, 20, 20, 17, 10, 8, 4, 24, -2, 9, 1, -4, 31, -22, 19, -20, -1, -35, 2, 8, -53, -38, -29, 16, -46, -19, 23, -34, -42, 6, -43, -19, 17, -8, -48, 2, -22, -4, 15, 27, 35, 7, 1, 27, -32, 39, -58, 1, 22, -14, 8, -7, -18, -1, -5, 13, 28, -17, 57, -13, 19, 23, -66, -9, -23, 14, -22, 2, 0, -24, 10, 1, -16, 4, -14, -33, 2, -4, -21, -4, -3, -22, 10, -18, -12, -18, -20, 3, -11, 4, -5, -14, -18, -25, 16, -6, -41, 18, -16, -34, 2, 8, -3, -2, 9, -5, 18, 14, 37, -27, -3, 10, 3, 32, 28, -20, 15, -6, 27, -2, 10, 6, -8, 33, -4, 3, -20, 29, 18, -25, -34, 20, -19, -42, -21, 20, 22, 20, -2, -31, -45, 29, 35, 17, 49, -41, -48, 66, -67, -62, -28, 58, -43, 17, 39, -30, -25, 15, 51, -39, 66, -55, -24, 27, 0, -3, 20, 74, -16, 3, 9, 26, 48, 21, -30, -25, 10, 0, -21, -8, -9, 7, 16, -5, 13, -19, -16, 10, 12, -28, 15, 3, 13, -9, 12, -7, -9, -20, -10, 12, -15, 7, 1, 21, 13, 4, 9, -4, 8, -6, 12, -6, -4, 7, -29, 16, 12, -23, -44, -34, -9, 46, 3, -8, 27, 21, 8, 44, 14, 4, -6, 19, -7, 3, 0, 0, -9, 25, -18, 0, 46, -21, 5, 1, -5, 13, 14, 30, -48, -15, 35, 6, 12, 18, -43, -35, 15, -59, -2, -90, 30, -25, -15, -14, -23, 14, 2, 14, 4, 6, 24, -17, -47, -38, 4, -38, -20, -15, -18, -27, -1, 18, -30, -11, -28, -36, -16, -22, 4, -10, 8, 0, 1, -15, -17, 8, -24, -3, 15, 3, 18, -2, 14, -20, 11, 13, 4, -24, 8, -5, -2, -17, -24, 14, 12, -8, 17, -19, 4, 19, 23, -6, -7, 16, -4, -8, -12, 21, -26, -21, 21, -42, -24, 53, 9, -4, 57, -51, -62, 12, -17, -33, -14, 22, -23, 16, 23, -11, -27, 54, -23, 0, 1, -28, -52, -22, -45, -63, -27, 3, 25, 11, 12, 13, -18, 32, 44, -9, -8, 0, 22, -3, 16, 7, -16, -22, -21, 11, 2, 7, 5, -1, 13, -12, -40, 6, -30, -3, -2, 18, -30, -51, -53, 11, -33, -31, -45, -45, 10, 13, -17, -23, -20, -16, 8, 14, 20, 2, 20, 20, -23, 7, -14, -28, 7, -22, -26, -9, -11, 2, -9, 4, -18, 1, -10, -10, -9, -20, -5, -27, -21, 11, -3, -8, -14, 8, 19, 5, 30, 2, -4, 4, 20, 12, 13, 19, 21, 0, 1, 6, -29, -4, 19, 2, 26, 35, 8, 7, 11, 9, -8, 41, 10, -6, -7, -13, 17, 15, -23, 6, 4, 30, 7, -14, 29, -9, 11, 7, 21, -19, -13, -27, -30, -10, -28, -15, -49, -10, -14, -3, -9, 4, 2, -17, 21, -42, 0, -25, 5, -13, -16, -6, -12, -44, -20, -17, -37, -3, -24, -22, -60, -8, -5, -26, 20, 10, -8, -2, -15, 12, 16, 11, 8, 2, 8, -4, -19, -10, 1, 0, 15, 13, -17, 8, 14, 3, -9, -23, -26, 11, -7, -22, 6, -4, -7, -26, 22, -2, 23, 9, -11, -1, -9, -16, -10, 8, 9, 9, 1, 19, -23, 5, 0, 16, -9, -8, 2, -7, -20, -7, 3, 8, 9, -15, 11, -2, -4, -3, -12, -22, 15, -5, -2, -18, 16, -9, -16, 17, -1, -22, 11, 18, -23, 5, 8, -15, 19, 20, -19, 13, -13, -18, 16, 26, 5, -10, -18, 11, 6, -2, 15, 12, -22, -21, 15, -7, 1, -12, -12, -7, -17, -2, -12, -22, -17, 1, 9, -22, -4, -16, 11, 0, 2, 2, 11, -10, 15, -7, 13, -18, 
  -19, -5, 4, 7, 7, 17, 14, 19, 2, 5, 16, 12, 18, 16, -17, -7, -13, -3, -1, 21, -10, -13, 0, -6, 18, 5, 0, 22, 9, 2, -8, 24, 7, -17, 13, -6, -6, -21, -20, 14, 4, 23, -2, 1, 21, 26, 23, 14, 5, -21, 5, 10, -25, -10, 6, 14, -2, -7, 5, 18, 12, -10, -2, -23, -6, 1, 18, 0, 11, -5, 18, -18, 17, 21, -1, -7, 2, 24, 3, -8, 9, 11, -3, -22, 13, 17, 8, -17, -23, -12, 23, 0, 18, -19, -15, -16, -13, 0, 0, 6, -16, 8, 2, -4, -1, -4, -17, 15, 16, -14, -6, -15, -20, 9, 6, -17, -2, 13, 10, 12, 23, 0, -19, -7, -4, 7, -10, 8, 16, 14, 17, -18, 2, 6, 4, 27, 6, 4, -3, -1, -12, 14, -20, -7, -22, 31, 35, -21, 14, 19, 4, -55, -5, -10, -38, 37, 19, -13, 48, 4, -52, -49, 44, -37, 7, 13, -57, -43, -65, 13, -77, -68, -9, -55, 4, -50, -77, -64, -1, -8, 8, -26, -61, -30, -65, 22, -55, -88, -24, -75, -97, -92, 3, 2, -9, 7, -3, -8, -3, 0, 4, 12, -59, 18, -9, -33, -68, -49, -8, 23, 16, -13, -11, 14, 6, 13, 7, -15, -21, -13, 4, -20, 19, 7, -16, 18, 11, 16, 14, 17, -11, -6, 13, 8, -11, 0, -12, -16, -1, 12, -22, 38, 10, -32, 34, 13, 26, -10, 28, 1, -19, 13, 33, 10, -5, 12, -79, -15, 60, -98, -28, 38, -1, -101, 14, -9, -41, 20, -8, -64, 35, -16, -55, -77, 30, -87, -42, 9, -20, -79, -1, 21, -39, -80, -77, -55, 61, -13, -34, -72, -77, -35, -4, -27, -63, -69, -41, -5, -27, -94, -41, -52, -97, -43, -27, -44, -4, -26, -10, 12, 12, 15, 37, 11, -21, -31, -17, 6, 20, -28, 6, -20, -14, 17, -5, -12, 3, -12, 12, -8, -8, -19, -1, -5, -13, 4, 4, 16, -13, 1, -7, 6, -2, -11, 2, 17, 0, -20, 2, -15, 7, 12, -28, 43, -22, 13, 40, -21, -16, -18, 8, 2, -5, 9, 20, -35, 4, 3, -60, 37, 11, -4, 28, 19, 17, -21, 17, -7, 8, 25, 43, -29, -18, 14, 13, -15, 27, 16, -72, 38, -15, 1, -8, 15, 6, -35, -38, 20, 44, 32, -7, -35, -29, -61, 41, -21, -43, 16, 12, -17, -1, -28, -23, 30, 10, -4, 10, 41, 4, 11, -23, -3, 31, 22, 24, 21, -16, 32, 16, 7, 33, -5, 19, -21, -2, -6, 0, 10, 14, 19, -19, -19, 9, -1, 12, 16, -15, -6, -2, -4, -2, 22, -13, 13, -9, 20, 6, -18, 18, -16, -18, -8, -16, -13, -36, 30, 18, 2, 3, -23, 3, 10, 28, -17, -49, -15, -3, 0, 23, -7, -3, 49, 4, 29, 43, 12, 17, 32, 26, 1, 4, 39, 36, 4, -75, 25, 39, 27, 9, 41, -14, -13, 31, 24, 24, -12, 34, 31, 31, 39, 16, 56, 47, 25, 26, 10, -19, 24, 7, 3, -23, 8, 24, 0, -8, 25, 17, 15, -17, 24, -16, 13, 25, -11, 22, -4, 10, 8, 7, 5, 17, 8, -22, -27, 16, -4, 3, -8, 4, -4, -1, 1, -16, -10, 12, 23, -3, -12, 23, -20, -9, -13, 1, 2, -13, -1, -21, -1, -16, -10, -15, -13, -13, 6, -16, -2, -6, 19, -7, -22, 10, -21, -39, -22, 10, -6, 22, 10, 10, -13, -18, 13, 22, 37, -16, 39, 22, -21, 31, 44, 23, 6, 19, 15, 11, 33, -58, 32, 34, 50, 29, 5, 31, 3, 24, 9, 23, -5, 24, 48, 35, -16, 16, 9, 24, 21, -2, -11, -29, 0, -3, -40, -47, 20, 47, 24, 32, 8, 31, 0, -21, -19, -25, -19, 2, -7, -21, -14, 1, -1, -30, 12, 2, 10, -33, -10, 0, -19, 12, 19, 10, -8, 11, 14, -11, -13, 22, 1, -2, 24, 3, -23, -13, -4, -20, 8, -8, 0, 7, 0, 2, 2, -1, -24, -13, -16, 14, 4, -12, -2, 18, -14, -9, -7, 9, -12, -16, 9, 8, 13, 3, 14, 16, -16, -16, 6, -18, -16, 21, -15, 17, 2, 23, -3, 2, 17, -5, 7, 12, -10, 8, -10, 8, -8, -11, 0, -22, 3, 10, -22, -4, -3, 21, -2, -12, -10, 10, 14, 14, -9, -16, 2, 16, 6, -26, -18, 4, -22, -11, 7, 8, -14, 8, 16, -2, -4, -13, 3, -21, -6, -5, -5, 11, -21, -8, 8, -15, 2, -7, 5, -19, 15, -18, 18, 18, 15, 7, 19, 11, -22, -10, 1, -10, -8, 
  23, 10, 2, 22, -7, -12, -2, -5, 28, 13, -8, 14, 0, -19, -12, -5, -6, -17, 5, 22, 10, -14, -8, 10, 6, -9, -3, 10, -7, 27, 18, -3, 11, -16, 3, 7, 13, 19, 21, -4, 8, 9, -15, -7, -18, 20, 6, 17, 20, 23, -3, 22, 11, 16, -5, 13, -21, 14, -13, 22, 21, -3, -20, -26, -3, -17, 13, -8, 12, 8, 24, 10, 6, 10, 0, 9, 9, -9, -12, 18, 17, -2, 23, 21, 12, 11, -15, 16, -8, 11, 11, 8, 5, 17, -23, -3, -14, -14, -4, 18, -4, 17, 8, 23, -14, 23, 28, -10, 20, -15, 19, 6, -2, -12, 16, 21, -4, 18, 8, -4, 17, -5, 27, -16, -18, -4, -14, -10, 42, 19, 24, 9, 22, -16, 24, 48, 19, 16, 13, 13, 16, 31, 4, 6, 19, 34, 40, 27, 25, 17, 27, 28, 51, -18, 52, 34, 60, 55, 11, 13, 19, -28, 46, -27, -56, -27, -1, 4, 8, -12, 16, -29, -25, 3, 39, -10, -3, -23, -5, 17, -13, -16, 0, 2, 11, 21, 13, 23, -39, 10, -19, 17, 10, 15, -15, -16, 11, 2, -4, 9, 17, 6, 11, -3, 4, 22, 25, 13, 13, 14, -5, 5, -8, 18, -15, -12, -3, 13, 18, 27, 21, 18, -7, 9, 19, -2, 10, 9, -19, 9, -14, -1, 14, 9, 21, 22, 14, -16, 3, 19, -6, -13, -15, -9, 33, -16, 6, 30, -44, 8, -4, -24, -16, 21, -24, 3, 49, 3, 18, 22, -1, 36, 23, 36, -1, -13, -8, 26, 8, 18, 15, -23, 31, 12, -31, 53, 50, -45, 0, 45, -5, 1, 10, 19, 21, 27, -33, 2, -3, 6, 34, 4, 35, 9, 57, 48, 33, 1, 29, 35, 23, 29, -8, 13, 15, 32, 30, -9, 16, 15, -7, 2, -8, 2, 47, 5, 12, 17, 20, 38, 2, 13, 12, 5, -12, -14, 13, -1, -11, 21, 21, 10, -4, 13, 7, -12, 14, 19, 6, 13, 1, 16, -13, 15, 17, -8, 21, 18, -8, 23, 11, 6, -16, -7, -3, 17, 30, -1, -14, -3, -33, 20, -7, -31, -15, -9, -24, -15, -57, -34, 72, -25, -44, 77, 24, -48, -59, 6, -34, -17, -38, -74, 99, -66, -34, -21, 9, -50, 24, -42, -9, -74, 11, 6, -23, -24, 6, -64, 1, -45, -21, 15, 13, 62, -1, 15, 15, 15, 33, -1, -4, 18, -1, -41, 28, -9, 25, 15, 5, -9, -16, 6, -22, 27, -26, -15, 8, 2, -13, 35, 5, 29, -14, -11, -18, -18, 25, -10, -14, 4, 13, 15, 5, -6, -6, 27, 19, 20, -15, 4, 8, 13, -17, -13, -7, 23, -9, 22, -5, 11, 4, -10, -5, -3, -5, -43, 19, 1, -13, 5, 1, -69, -18, -11, -9, -16, 4, -17, 18, -35, -80, -44, 48, -44, -79, 29, -73, -94, -67, 4, -96, -45, -55, -88, -9, -96, -88, 8, 11, -30, 25, 16, -17, -68, -21, 8, -58, -20, -15, -115, -1, -58, -17, -6, 11, 4, -2, 3, -15, -54, -11, 7, -21, -26, -13, -67, 4, 4, -33, -32, -20, -4, -2, -16, -22, -15, -11, -1, -47, 4, 6, -29, -3, -33, -3, 21, -16, 18, 5, -11, 6, 27, 3, -6, 10, 15, 4, -2, 12, 22, 18, 19, -9, -10, 0, -7, 10, 2, 11, -7, -9, 16, 7, 3, 4, 7, -21, 15, -2, -19, -10, -9, -2, -18, -14, -16, -10, -18, -7, -6, -13, -20, -34, -33, -26, -29, -14, -1, -102, -70, -27, 15, -57, -44, -7, -57, -47, -11, -84, 15, -5, 16, 16, 24, -5, -43, 10, 8, -88, -66, -17, -34, -43, -31, -19, -16, -13, 23, -22, 16, 3, -2, 2, 11, 1, -38, -38, -24, -54, 6, 1, -18, 2, -2, -15, -13, 1, -4, 9, 16, -8, -22, 0, -31, -4, -13, -3, -15, 12, 11, -7, -3, 9, 12, 6, -5, 13, -14, -4, 10, -26, 29, 8, 30, 0, -12, -16, -12, -10, -2, -4, -9, 0, -11, 9, -13, -9, -10, -4, -8, -6, 28, -2, 11, 9, 13, 18, 14, 9, 4, 1, 21, 16, -7, -12, 8, 7, 13, 23, 12, 1, 21, -4, -7, 12, -8, -16, -9, 21, 6, 12, 4, -5, 14, 15, 22, 23, 5, 19, 22, 3, 10, -9, 25, 20, 9, -14, -7, -22, -12, 18, 18, 18, -13, -7, 17, 7, -13, -14, -3, 18, 2, 10, -7, 1, 0, 16, 22, 3, 6, 2, 10, 19, -14, -14, 11, 1, -8, 20, -8, 14, -5, 24, 18, 9, 7, 19, -7, 10, 1, 24, -10, -11, 23, 
  -5, 0, -4, -18, -17, 11, -17, 6, -21, -20, -15, 3, -3, -23, -23, -20, -14, -17, -11, 3, -3, 4, -14, -11, -3, -16, 8, -2, -14, -5, 4, -16, -2, -17, 18, 1, -19, -4, -13, 0, -5, -22, -10, -20, 9, 10, -15, 21, -6, 13, 5, 18, -17, -23, -20, -1, -3, 3, -22, 3, -22, -7, 0, 5, 5, -6, -24, 23, -7, -22, 11, -16, -22, -23, 8, -12, -3, 6, 17, 9, 6, -9, 9, -18, 0, 5, -17, 12, -8, -16, -18, -1, -16, 2, 9, -2, -7, -1, -8, -17, -8, 12, -1, 6, -15, -23, -26, -15, -3, -22, 9, 8, -8, -14, 9, 2, -3, -20, -12, -20, 13, 20, -9, 13, -2, -16, 10, -8, 7, 3, -1, -16, -2, 4, 19, -25, 11, 5, -54, -5, -17, -4, 3, 14, -32, 1, 2, 12, 1, 10, 24, 1, -14, 2, 30, 0, -14, 8, -46, 6, -6, -7, -58, -13, -19, 0, 20, -12, 6, 23, 20, -3, -21, 18, 34, 19, -3, -26, 25, -44, 9, 9, -9, -69, -37, -14, 10, -26, -6, 9, 45, -8, -29, -1, -43, 11, -16, 16, 6, -9, -32, -10, -69, -26, 1, -74, -65, -62, -8, 11, 19, 17, 3, 19, 12, -23, -13, 13, 6, -23, 16, -32, 4, -13, -11, 5, 18, -22, 8, 11, -13, 2, -17, 9, 16, -19, 3, -25, 9, 0, 8, 7, -9, 26, 0, -8, -19, 42, 7, 7, -4, 5, 8, 26, -10, -22, 6, 15, -64, 30, 14, -43, 14, -5, 40, -15, 41, 6, 21, 0, -33, 18, 17, 1, 6, 3, -32, -42, 11, 0, -13, 18, 12, -10, 7, 22, 19, 33, 30, 44, 21, -20, -71, 3, 9, -20, -19, -22, 36, 29, 19, -15, 36, -18, 2, -6, -20, -18, -8, -23, -81, -65, -25, 11, -16, -76, -22, -22, -16, -7, 6, -7, -4, 3, -13, -6, -26, -24, -20, 7, 9, -19, -24, -23, 15, -7, 19, -19, -14, -9, -4, -1, -15, 6, -10, -9, -15, -13, -12, -11, -6, -15, -27, -8, 11, -33, -11, 11, -20, -1, -2, 9, 16, -34, -21, -9, -14, -2, 23, -3, -3, -5, 13, -17, -8, 19, 8, -9, -29, -9, 6, -33, -4, -4, 16, -10, -8, -15, -9, 14, 0, 15, 4, -12, 11, 18, -4, 9, 29, -8, 10, -22, -10, -26, -11, -34, -26, -17, -24, -21, -14, -12, -2, -1, -19, -11, 22, -11, -29, -32, -5, -4, -10, -21, -2, -2, 6, 31, 28, 23, -11, -19, -16, -2, 10, 19, 13, -11, 12, -21, -15, 22, 1, 2, -22, -34, -5, -18, 7, -16, -9, -11, -5, -17, 12, -11, 10, -14, 7, 17, 15, -9, 4, -1, -31, -25, -8, -32, -13, -6, -31, -33, -22, 4, -29, -16, -24, -14, -2, -7, -36, 5, 41, -8, 18, 19, -17, -11, -4, -18, -33, 19, 27, -22, 44, -6, -16, 14, 51, 14, -1, 17, 15, -1, -9, -18, 21, 16, 23, 8, -32, -12, 10, -20, -33, -20, -23, -28, -11, -25, 6, -1, 16, 26, -16, 32, -3, 0, 1, 8, 24, 11, 5, 14, 8, -6, 33, 17, -4, -9, 20, 2, -2, -8, -14, -17, -18, 2, -11, -19, -22, -23, -15, 4, -11, -5, 12, -5, -6, -24, -2, -9, -2, 5, 15, 16, -8, -17, -26, 11, -1, 19, 13, 14, -3, -23, 6, -36, -4, -16, -26, -1, -25, -48, -34, -17, -35, -21, -14, -23, -22, -16, -8, 17, 12, 3, 14, -12, 20, 22, 21, -6, 4, 7, 3, -23, -81, 17, 32, 8, 34, 10, 6, -4, 16, 17, -13, -20, 24, 10, 32, 23, -22, 0, -3, -21, 15, 9, -19, 22, 27, -12, -15, 19, 29, 15, 5, 36, 2, 29, 11, 25, -16, 8, 7, -21, 0, 0, 21, 9, 11, -24, -16, -17, 3, -8, -18, -19, 10, -21, -3, -20, -5, -18, 0, -9, -12, 12, 16, 6, -12, -6, -22, -19, 11, 3, -17, 0, 0, 14, 5, -18, -14, 13, 3, -17, 7, -17, -20, -22, -16, 12, -4, 7, -18, 8, 14, -6, -16, 8, -22, 11, 18, 15, 13, 8, 3, -17, -4, -15, -15, 8, -5, 8, -22, 3, -14, -2, -4, -8, 15, 9, 17, -14, 11, -12, 18, 16, -21, -19, -15, 18, -16, -15, 8, -11, -5, -16, 3, -22, -22, -16, 2, -27, 20, 14, 4, 14, 5, -6, -1, 9, -23, -20, -3, -24, -20, 8, 11, -13, -23, -8, -13, -14, -23, -16, -19, -3, -13, -11, 16, 7, -1, -19, -9, 0, 0, 3, 1, 11, 11, 5, -16, -14, 
  16, -2, -10, 15, -21, -4, 11, -21, -2, 22, 6, -11, -12, -4, 2, 1, -1, -18, 8, 1, 16, -16, 13, 15, -11, 15, -17, 10, 15, -10, 20, -19, 19, -17, 18, 17, -20, 10, -13, -11, 26, 5, 6, 2, -7, 19, 11, 8, -12, 13, -2, -6, -1, 3, -9, -6, 14, -4, 2, 9, -15, 7, 22, 19, 5, -9, -12, 0, -9, -17, -1, 6, -5, -20, -3, 4, 3, 27, -9, 27, -14, -3, 14, -4, -13, 1, 5, 18, -14, 12, -17, -23, 8, 3, -13, 15, -13, 1, -5, -18, 0, -19, -1, 17, -15, 12, 13, -23, 6, 10, 19, -5, -6, 16, 15, 8, -9, 6, -14, 16, -3, 15, -22, -2, -10, -11, -19, -1, -18, -13, 17, -26, -47, 5, -24, -62, -9, -15, -52, 13, -20, -33, -17, -18, 19, -84, -54, -49, -47, -25, -72, -8, -35, 0, 19, -79, -42, -10, -56, -21, 69, 7, -85, 37, 12, 1, 39, 41, 44, -21, 47, 60, 47, 58, -26, 22, 56, 63, 6, 28, 23, -14, -3, 36, -21, 1, 35, 37, 66, 23, 55, 26, 16, 22, 7, 10, 11, -16, -9, 40, 29, -3, 11, -21, 15, 42, 44, 16, -13, 0, -1, -22, 12, 3, 15, -19, 3, -10, 21, 17, 11, 23, -15, -4, -13, -13, -9, -22, -1, 9, -12, 4, -20, 18, -1, -25, -14, 12, 11, -15, -10, -12, 14, -4, -11, -7, -5, -34, -8, -9, -7, 16, 12, -29, -19, 6, -44, -7, -43, -19, 0, -58, 5, -35, 26, 17, 16, -11, 11, 17, -2, 43, 24, 26, 6, 13, 8, -7, 29, 18, -2, -21, 25, 8, 20, 7, 30, -2, 21, -9, 3, -19, 12, -6, 43, 23, 30, 17, 6, 49, 11, 7, 3, -1, -24, 55, 25, -8, 22, 33, 10, -21, 35, -9, 11, 36, -2, -7, 8, 0, 14, 3, 19, -4, 12, 13, 0, 7, -1, 23, 14, 13, -5, 17, -11, -10, 15, 14, -20, -8, 0, -17, 8, 10, -10, -14, 25, 4, -13, -5, 12, 6, -18, 11, 7, -26, 10, 5, 5, -32, -5, -18, -36, 19, 33, -30, -10, -18, 16, 34, -11, 43, 6, -42, 17, 39, 18, 1, 4, -10, 29, 8, -36, 13, -9, -2, -13, 20, -14, -46, 0, 36, -4, -21, -10, 3, 9, 8, -52, -3, -19, -10, 11, 31, 14, 21, 13, -7, 8, -13, -22, 14, 3, -52, 24, -36, -36, 5, -1, -7, -32, 30, 28, -41, -16, -14, -43, -50, -30, -68, 2, -1, -21, -12, -18, 11, -13, 1, 10, -13, -13, 16, -12, -14, -3, -4, -18, 13, -13, 1, 4, 5, 15, -16, -3, -4, 12, 2, -6, 11, -12, -11, -10, -9, -9, -16, -13, -30, -35, -17, -15, -50, 25, -1, -59, -2, -22, -42, -14, -24, -41, -60, -18, -73, -99, 6, 0, -81, -70, -18, -44, -34, -39, -78, -52, -83, -45, -3, -84, -62, 13, -81, -34, -40, -9, -15, -44, -7, -16, -105, -80, -109, -49, 26, 10, 22, 8, 16, -3, -13, 15, 13, -37, 22, 29, -44, -31, -5, -17, 32, 35, 17, 17, -9, 15, 8, 13, -21, -21, -23, -27, -20, 24, 19, -13, 11, -23, -23, 8, -5, -9, 5, 7, -23, 17, 6, 2, -1, 2, 4, 1, 2, -10, -1, 6, 13, 17, -21, -19, -21, -5, -14, 21, -16, 12, -1, -3, -36, -20, -9, -16, -23, 11, -10, -23, -4, 4, -4, 13, -35, 4, -33, -54, -40, 3, -37, -53, 3, -103, -61, -76, -3, -62, -27, -5, -89, -23, -33, -86, -41, -48, -47, -4, -18, -58, -71, 17, 20, -112, -80, -72, -41, -116, -28, -28, 37, 35, 35, 35, 10, 29, -20, 28, 22, 6, -32, -4, -26, -8, 17, 13, 41, 18, 28, -17, 9, 6, 14, 9, -12, 33, 44, 32, 23, 39, 45, 8, 7, 19, -2, 3, 5, -16, -20, -15, 23, -12, -3, -5, -13, 6, -22, 7, -8, -8, -16, -19, 11, -11, 18, 15, -16, -24, 13, -11, 5, -18, -15, -18, -23, 15, -21, -21, 1, -11, 3, 4, -21, -15, -15, -11, 8, -10, -15, -4, -4, -22, -12, -15, 21, -6, -6, 11, -13, 10, 17, 19, 4, 17, 1, -13, 17, 9, 13, 3, 19, 0, 10, -23, 6, -11, 16, -20, -4, -1, 13, 4, -8, 11, 11, -18, -8, 12, 7, -6, -3, -8, 21, 0, 9, -23, 12, -6, 2, -7, -22, 15, -21, -10, -10, -5, 23, 8, 12, 18, -6, -23, -5, -22, -27, 2, 9, 8, 18, -24, -1, 3, -11, 1, 19, 5, -1, -18, -11, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 10,784 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00370012316852808, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[10] = { 36, 321, -51, -243, -16, -67, -34, 125, -120, -65, };
const TfArray<1, int> tensor_dimension7 = { 1, { 10 } };
const TfArray<1, float> quant7_scale = { 1, { 9.3050955911166966e-05, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,28,28,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0043619517236948013, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,14,14,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0043619517236948013, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,14,14,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.025148069486021996, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.025148069486021996, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,784 } };
const TfArray<1, float> quant12_scale = { 1, { 0.025148069486021996, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,10 } };
const TfArray<1, float> quant13_scale = { 1, { 0.20171955227851868, } };
const TfArray<1, int> quant13_zero = { 1, { 56 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,10 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,4,5 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension0, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 7840, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension9, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension11, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension13, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
